{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\artem-pizza\\\\admin\\\\src\\\\IngredientsListPage\\\\components\\\\EditIngredientForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useMutation } from 'react-query';\nimport * as yup from 'yup';\nimport { api } from '../../api'; // Type\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Название - обязательное поле'),\n  slug: yup.string().required('Идентификатор - обязательное поле'),\n  price: yup.number().transform((cv, ov) => ov === '' ? undefined : cv).typeError('Цена должна быть числом').required('Цена - обязательное поле'),\n  // FIXME: do not show error text\n  image: yup.mixed().required('Картинка обязательна')\n});\nexport const EditIngredientForm = ({\n  editingIngredient,\n  ingredient,\n  ingredientId,\n  setIsCancel,\n  setIsEditing\n}) => {\n  _s();\n\n  var _errors$name, _errors$slug, _errors$price, _errors$category, _errors$image;\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n  const [currentCategory] = useState(ingredient.category); // const [isEditing, setIsEditing] = useState(true);\n\n  const {\n    data: serverResponse,\n    isError,\n    isLoading,\n    mutateAsync: editIngredient\n  } = useMutation(({\n    formData,\n    ingredientId\n  }) => api.ingredients.editIngredient(formData, ingredientId)); // FIXME: the form  shouldn not close if inputs not fill\n\n  const onSubmit = handleSubmit(async data => {\n    const {\n      name,\n      slug,\n      price,\n      category,\n      image\n    } = data;\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('slug', slug);\n    formData.append('price', price);\n    formData.append('category', category);\n    formData.append('image', image[0]);\n    await editIngredient({\n      formData,\n      ingredientId\n    });\n\n    if (!(serverResponse === null || serverResponse === void 0 ? void 0 : serverResponse.ok)) {\n      console.log('serverResponse>>>', serverResponse === null || serverResponse === void 0 ? void 0 : serverResponse.ok);\n      setIsCancel(false);\n      setIsEditing(true);\n    } else {\n      setIsEditing(false);\n      await setIsCancel(true);\n    }\n  });\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \\u0447\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u0443\\u0435\\u043C \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442 \", editingIngredient]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442\\u0430. (\\u0411\\u0443\\u0434\\u0435\\u0442 \\u043F\\u043E\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044E)\", /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: register,\n              id: \"name\",\n              type: \"text\",\n              name: \"name\",\n              defaultValue: ingredient.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slug\",\n            children: [\"\\u0418\\u0434\\u0435\\u043D\\u0442\\u0438\\u0444\\u0438\\u043A\\u0430\\u0442\\u043E\\u0440 \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442\\u0430\", /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: register,\n              id: \"slug\",\n              type: \"text\",\n              name: \"slug\",\n              defaultValue: ingredient.slug\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: (_errors$slug = errors.slug) === null || _errors$slug === void 0 ? void 0 : _errors$slug.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"price\",\n            children: [\"\\u0426\\u0435\\u043D\\u0430 \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442\\u0430\", /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: register,\n              id: \"price\",\n              type: \"tel\",\n              name: \"price\",\n              defaultValue: ingredient.price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: (_errors$price = errors.price) === null || _errors$price === void 0 ? void 0 : _errors$price.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"category\",\n            children: [\"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442\\u0430\", /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"category\",\n              ref: register,\n              name: \"category\",\n              defaultValue: currentCategory,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"sauces\",\n                children: \"\\u0421\\u043E\\u0443\\u0441\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"cheese\",\n                children: \"\\u0421\\u044B\\u0440\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"vegetables\",\n                children: \"\\u041E\\u0432\\u043E\\u0449\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"meat\",\n                children: \"\\u041C\\u044F\\u0441\\u043E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: (_errors$category = errors.category) === null || _errors$category === void 0 ? void 0 : _errors$category.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"image\",\n            children: [\"\\u0418\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442\\u0430\", /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"image\",\n              ref: register,\n              type: \"file\",\n              name: \"image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: (_errors$image = errors.image) === null || _errors$image === void 0 ? void 0 : _errors$image.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), \")\"]\n  }, void 0, true);\n};\n\n_s(EditIngredientForm, \"9oqPXl4PYocpsoXBjvOpLafBbfo=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = EditIngredientForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditIngredientForm\");","map":{"version":3,"sources":["F:/artem-pizza/admin/src/IngredientsListPage/components/EditIngredientForm.tsx"],"names":["yupResolver","useState","useForm","useMutation","yup","api","schema","object","shape","name","string","required","slug","price","number","transform","cv","ov","undefined","typeError","image","mixed","EditIngredientForm","editingIngredient","ingredient","ingredientId","setIsCancel","setIsEditing","register","handleSubmit","errors","resolver","currentCategory","category","data","serverResponse","isError","isLoading","mutateAsync","editIngredient","formData","ingredients","onSubmit","FormData","append","ok","console","log","message"],"mappings":"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","sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useMutation } from 'react-query';\nimport * as yup from 'yup';\nimport { api } from '../../api';\n// Type\nimport { Ingredient } from '../../types';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Название - обязательное поле'),\n  slug: yup.string().required('Идентификатор - обязательное поле'),\n  price: yup\n    .number()\n    .transform((cv, ov) => (ov === '' ? undefined : cv))\n    .typeError('Цена должна быть числом')\n    .required('Цена - обязательное поле'),\n  // FIXME: do not show error text\n  image: yup.mixed().required('Картинка обязательна'),\n});\n\ntype EditIngredientFormProps = {\n  editingIngredient: string;\n  ingredient: Ingredient;\n  ingredientId: string;\n  setIsCancel: (v: boolean) => void;\n  setIsEditing: (v: boolean) => void;\n};\n\ntype EditIngredient = {\n  formData: FormData;\n  ingredientId: string;\n};\n\nexport const EditIngredientForm = ({\n  editingIngredient,\n  ingredient,\n  ingredientId,\n  setIsCancel,\n  setIsEditing,\n}: EditIngredientFormProps) => {\n  const { register, handleSubmit, errors } = useForm<Ingredient>({\n    resolver: yupResolver(schema),\n  });\n\n  const [currentCategory] = useState(ingredient.category);\n  // const [isEditing, setIsEditing] = useState(true);\n\n  const {\n    data: serverResponse,\n    isError,\n    isLoading,\n    mutateAsync: editIngredient,\n  } = useMutation(({ formData, ingredientId }: EditIngredient) =>\n    api.ingredients.editIngredient(formData, ingredientId)\n  );\n\n  // FIXME: the form  shouldn not close if inputs not fill\n  const onSubmit = handleSubmit(async data => {\n    const { name, slug, price, category, image } = data;\n    const formData = new FormData();\n\n    formData.append('name', name);\n    formData.append('slug', slug);\n    formData.append('price', price);\n    formData.append('category', category);\n    formData.append('image', image[0]);\n\n    await editIngredient({ formData, ingredientId });\n    if (!serverResponse?.ok) {\n      console.log('serverResponse>>>', serverResponse?.ok);\n      setIsCancel(false);\n      setIsEditing(true);\n    } else {\n      setIsEditing(false);\n      await setIsCancel(true);\n    }\n  });\n\n  if (isError) {\n    return <p>Ошибка: что-то пошло не так...</p>;\n  }\n\n  if (isLoading) {\n    return <p>Загрузка данных...</p>;\n  }\n\n  return (\n    <>\n      {/* {isEditing && ( */}\n      <>\n        <h3> Редактируем ингредиент {editingIngredient}</h3>\n        <form onSubmit={onSubmit}>\n          <div>\n            <label htmlFor='name'>\n              Название ингредиента. (Будет показано пользователю)\n              <input\n                ref={register}\n                id='name'\n                type='text'\n                name='name'\n                defaultValue={ingredient.name}\n              />\n              <div>{errors.name?.message}</div>\n            </label>\n          </div>\n          <div>\n            <label htmlFor='slug'>\n              Идентификатор ингредиента\n              <input\n                ref={register}\n                id='slug'\n                type='text'\n                name='slug'\n                defaultValue={ingredient.slug}\n              />\n              <div>{errors.slug?.message}</div>\n            </label>\n          </div>\n          <div>\n            <label htmlFor='price'>\n              Цена ингредиента\n              <input\n                ref={register}\n                id='price'\n                type='tel'\n                name='price'\n                defaultValue={ingredient.price}\n              />\n              <div>{errors.price?.message}</div>\n            </label>\n          </div>\n          <div>\n            <label htmlFor='category'>\n              Категория ингредиента\n              <select\n                id='category'\n                ref={register}\n                name='category'\n                defaultValue={currentCategory}\n              >\n                <option value='sauces'>Соус</option>\n                <option value='cheese'>Сыр</option>\n                <option value='vegetables'>Овощ</option>\n                <option value='meat'>Мясо</option>\n              </select>\n              <div>{errors.category?.message}</div>\n            </label>\n          </div>\n          <div>\n            <label htmlFor='image'>\n              Изображение ингредиента\n              <input id='image' ref={register} type='file' name='image' />\n            </label>\n            <div>{errors.image?.message}</div>\n          </div>\n          <button>Отправить</button>\n        </form>\n      </>\n      ){/* } */}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}