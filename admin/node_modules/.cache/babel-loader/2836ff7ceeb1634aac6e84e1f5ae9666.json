{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  } // Always set stale time when using suspense to prevent\n  // fetching again when directly re-mounting after suspense\n\n\n  if (defaultedOptions.suspense && typeof defaultedOptions.staleTime !== 'number') {\n    defaultedOptions.staleTime = 1000;\n  } // Create query observer\n\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions);\n  }\n\n  var _React$useState = React.useState({}),\n      rerender = _React$useState[1];\n\n  var currentResult = observer.getCurrentResult(); // Remember latest result to prevent redundant renders\n\n  var latestResultRef = React.useRef(currentResult);\n  latestResultRef.current = currentResult; // Subscribe to the observer\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(notifyManager.batchCalls(function (result) {\n      if (result !== latestResultRef.current) {\n        rerender({});\n      }\n    }));\n  }, [observer, errorResetBoundary]); // Handle suspense\n\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (currentResult.isError && !errorResetBoundary.isReset() && !observer.getCurrentQuery().isFetching()) {\n      throw currentResult.error;\n    }\n\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.refetch().finally(unsubscribe);\n    }\n  }\n\n  return currentResult;\n}","map":{"version":3,"sources":["F:/artem-pizza/admin/node_modules/react-query/es/react/useBaseQuery.js"],"names":["React","notifyManager","useQueryErrorResetBoundary","useQueryClient","useBaseQuery","options","Observer","queryClient","errorResetBoundary","defaultedOptions","defaultQueryObserverOptions","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","observerRef","useRef","observer","current","hasListeners","setOptions","_React$useState","useState","rerender","currentResult","getCurrentResult","latestResultRef","useEffect","clearReset","subscribe","result","useErrorBoundary","isError","isReset","getCurrentQuery","isFetching","error","isLoading","unsubscribe","refetch","finally"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  } // Always set stale time when using suspense to prevent\n  // fetching again when directly re-mounting after suspense\n\n\n  if (defaultedOptions.suspense && typeof defaultedOptions.staleTime !== 'number') {\n    defaultedOptions.staleTime = 1000;\n  } // Create query observer\n\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions);\n  }\n\n  var _React$useState = React.useState({}),\n      rerender = _React$useState[1];\n\n  var currentResult = observer.getCurrentResult(); // Remember latest result to prevent redundant renders\n\n  var latestResultRef = React.useRef(currentResult);\n  latestResultRef.current = currentResult; // Subscribe to the observer\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(notifyManager.batchCalls(function (result) {\n      if (result !== latestResultRef.current) {\n        rerender({});\n      }\n    }));\n  }, [observer, errorResetBoundary]); // Handle suspense\n\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (currentResult.isError && !errorResetBoundary.isReset() && !observer.getCurrentQuery().isFetching()) {\n      throw currentResult.error;\n    }\n\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.refetch().finally(unsubscribe);\n    }\n  }\n\n  return currentResult;\n}"]},"metadata":{},"sourceType":"module"}