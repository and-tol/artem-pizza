[{"F:\\artem-pizza\\admin\\src\\index.tsx":"1","F:\\artem-pizza\\admin\\src\\App.tsx":"2","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\index.ts":"3","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\IngredientsListPage.tsx":"4","F:\\artem-pizza\\admin\\src\\api.ts":"5","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\NewIngredientForm.tsx":"6","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\EditIngredientForm.tsx":"7"},{"size":487,"mtime":1608665822857,"results":"8","hashOfConfig":"9"},{"size":403,"mtime":1608219114796,"results":"10","hashOfConfig":"9"},{"size":37,"mtime":1608219094544,"results":"11","hashOfConfig":"9"},{"size":6308,"mtime":1608823563486,"results":"12","hashOfConfig":"9"},{"size":915,"mtime":1608811849077,"results":"13","hashOfConfig":"9"},{"size":3564,"mtime":1608543375504,"results":"14","hashOfConfig":"9"},{"size":4811,"mtime":1608740379955,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"vfnajk",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"F:\\artem-pizza\\admin\\src\\index.tsx",[],["32","33"],"F:\\artem-pizza\\admin\\src\\App.tsx",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\index.ts",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\IngredientsListPage.tsx",[],"F:\\artem-pizza\\admin\\src\\api.ts",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\NewIngredientForm.tsx",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\EditIngredientForm.tsx",["34","35"],"import { yupResolver } from '@hookform/resolvers/yup';\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useMutation } from 'react-query';\nimport * as yup from 'yup';\nimport { api } from '../../api';\n// Type\nimport { Ingredient } from '../../types';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Название - обязательное поле'),\n  slug: yup.string().required('Идентификатор - обязательное поле'),\n  price: yup\n    .number()\n    .transform((cv, ov) => (ov === '' ? undefined : cv))\n    .typeError('Цена должна быть числом')\n    .required('Цена - обязательное поле'),\n  // FIXME: do not show error text\n  image: yup.mixed().required('Картинка обязательна'),\n});\n\ntype EditIngredientFormProps = {\n  editingIngredient: string;\n  ingredient: Ingredient;\n  ingredientId: string;\n  setIsCancel: (v: boolean) => void;\n};\n\ntype EditIngredient = {\n  formData: FormData;\n  ingredientId: string;\n};\n\nexport const EditIngredientForm = ({\n  editingIngredient,\n  ingredient,\n  ingredientId,\n  setIsCancel,\n}: EditIngredientFormProps) => {\n  const { register, handleSubmit, errors } = useForm<Ingredient>({\n    resolver: yupResolver(schema),\n  });\n\n  const [currentCategory] = useState(ingredient.category);\n  const [isEditing, setIsEditing] = useState(true);\n\n  const {\n    data: serverResponse,\n    isError,\n    isLoading,\n    mutateAsync: editIngredient,\n  } = useMutation(({ formData, ingredientId }: EditIngredient) =>\n    api.ingredients.editIngredient(formData, ingredientId)\n  );\n\n  const onSubmit = handleSubmit(async data => {\n    const { name, slug, price, category, image } = data;\n    const formData = new FormData();\n\n    formData.append('name', name);\n    formData.append('slug', slug);\n    formData.append('price', price);\n    formData.append('category', category);\n    formData.append('image', image[0]);\n\n    await editIngredient({ formData, ingredientId });\n    await setIsEditing(false);\n    await setIsCancel(true);\n  });\n\n\n  if (isError) {\n    return <p>Ошибка: что-то пошло не так...</p>;\n  }\n\n  if (isLoading) {\n    return <p>Загрузка данных...</p>;\n  }\n\n  return (\n    <>\n      {isEditing && (\n        <>\n          <h3> Редактируем ингредиент {editingIngredient}</h3>\n          <form onSubmit={onSubmit}>\n            <div>\n              <label htmlFor='name'>\n                Название ингредиента. (Будет показано пользователю)\n                <input\n                  ref={register}\n                  id='name'\n                  type='text'\n                  name='name'\n                  defaultValue={ingredient.name}\n                />\n                <div>{errors.name?.message}</div>\n              </label>\n            </div>\n            <div>\n              <label htmlFor='slug'>\n                Идентификатор ингредиента\n                <input\n                  ref={register}\n                  id='slug'\n                  type='text'\n                  name='slug'\n                  defaultValue={ingredient.slug}\n                />\n                <div>{errors.slug?.message}</div>\n              </label>\n            </div>\n            <div>\n              <label htmlFor='price'>\n                Цена ингредиента\n                <input\n                  ref={register}\n                  id='price'\n                  type='tel'\n                  name='price'\n                  defaultValue={ingredient.price}\n                />\n                <div>{errors.price?.message}</div>\n              </label>\n            </div>\n            <div>\n              <label htmlFor='category'>\n                Категория ингредиента\n                <select\n                  id='category'\n                  ref={register}\n                  name='category'\n                  defaultValue={currentCategory}\n                >\n                  <option value='sauces'>Соус</option>\n                  <option value='cheese'>Сыр</option>\n                  <option value='vegetables'>Овощ</option>\n                  <option value='meat'>Мясо</option>\n                </select>\n                <div>{errors.category?.message}</div>\n              </label>\n            </div>\n            <div>\n              <label htmlFor='image'>\n                Изображение ингредиента\n                <input id='image' ref={register} type='file' name='image' />\n              </label>\n              <div>{errors.image?.message}</div>\n            </div>\n            <button>Отправить</button>\n          </form>\n        </>\n      )}\n    </>\n  );\n};\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":20,"nodeType":"42","messageId":"43","endLine":2,"endColumn":29},{"ruleId":"40","severity":1,"message":"44","line":48,"column":11,"nodeType":"42","messageId":"43","endLine":48,"endColumn":25},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'serverResponse' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]