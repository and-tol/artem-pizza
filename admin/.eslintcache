[{"F:\\artem-pizza\\admin\\src\\index.tsx":"1","F:\\artem-pizza\\admin\\src\\App.tsx":"2","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\index.ts":"3","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\IngredientsListPage.tsx":"4","F:\\artem-pizza\\admin\\src\\api.ts":"5","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\NewIngredientForm.tsx":"6","F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\EditIngredientForm.tsx":"7"},{"size":720,"mtime":1610704717663,"results":"8","hashOfConfig":"9"},{"size":403,"mtime":1610647239213,"results":"10","hashOfConfig":"9"},{"size":37,"mtime":1610647239229,"results":"11","hashOfConfig":"9"},{"size":8600,"mtime":1610905292536,"results":"12","hashOfConfig":"9"},{"size":900,"mtime":1610648766495,"results":"13","hashOfConfig":"9"},{"size":4144,"mtime":1610647239227,"results":"14","hashOfConfig":"9"},{"size":7690,"mtime":1610962486733,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"vfnajk",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\artem-pizza\\admin\\src\\index.tsx",[],["32","33"],"F:\\artem-pizza\\admin\\src\\App.tsx",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\index.ts",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\IngredientsListPage.tsx",["34","35"],"import React, { Fragment, useEffect, useState } from 'react';\n// Api\nimport { api } from '../api';\n// Types\nimport { Ingredient } from '../types';\n// Components\nimport { EditIngredientForm } from './components/EditIngredientForm';\nimport { NewIngredientForm } from './components/NewIngredientForm';\n// Styles\nimport {\n  Container,\n  ButtonGroup,\n  Button,\n  Grid,\n  Box,\n  CircularProgress,\n  Typography,\n  Paper,\n} from '@material-ui/core';\n\nexport const IngredientsListPage = () => {\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\n  const [selectedId, setSelectedID] = useState<string | null>('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  /**\n   * Delete ingredient on server\n   */\n  const deleteIngredient = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    const id = e.currentTarget.parentElement!.getAttribute('id');\n\n    await api.ingredients.deleteIngredient(id);\n\n    const ingredients = await api.ingredients\n      .availableIngredients()\n      .then(data => data.json());\n\n    setIngredients(ingredients);\n  };\n\n  const createNewIngredient = () => {\n    setIsCreating(true);\n    setIsShowing(false);\n  };\n\n  /**\n   * Cancel Creating New Ingredient\n   */\n  const cancelCreatingNewIngredient = () => {\n    setIsCreating(false);\n  };\n\n  /**\n   * Show/unshow ingredient\n   */\n  const [isShowing, setIsShowing] = useState(false);\n  const showIngredient = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const id = e.currentTarget.parentElement!.getAttribute('id');\n\n    setSelectedID(id);\n    setIsShowing(true);\n    setIsCancel(true);\n  };\n  const unshowIngredient = () => {\n    setIsShowing(false);\n  };\n\n  /**\n   * Ingredient is editing.\n   * Show/hide form to editing ingredients\n   */\n  const [isCancel, setIsCancel] = useState(true);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const editIngredient = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const id = e.currentTarget.parentElement!.getAttribute('id');\n\n    setSelectedID(id);\n    setIsCancel(false);\n    setIsShowing(false);\n    setIsEditing(true);\n  };\n\n  const cancelEditingIngredient = () => {\n    setIsCancel(true);\n    setIsEditing(false);\n  };\n  useEffect(() => {\n    let ingredients: Ingredient[] = [];\n    const getIngredients = async () => {\n      const result = await api.ingredients.availableIngredients();\n\n      if (result) {\n        ingredients = await result.json();\n      }\n\n      await setIngredients(ingredients);\n    };\n\n    getIngredients();\n  }, [isCancel]);\n\n  useEffect(() => {}, []);\n\n  /**\n   * Get all ingredients from the server at the first rendering\n   */\n  useEffect(() => {\n    const getIngredients = async () => {\n      try {\n        const ingredients = await api.ingredients\n          .availableIngredients()\n          .then(data => data.json());\n\n        await setIngredients(ingredients);\n        await setIsLoading(false);\n      } catch (err) {\n        setIsError(true);\n      }\n    };\n\n    getIngredients();\n  }, []);\n\n  /**\n   * Get all ingredients when new ingredient has created\n   */\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setIsAdding(false);\n    }, 5000);\n\n    let ingredients: Ingredient[] = [];\n    const getIngredients = async () => {\n      const result = await api.ingredients.availableIngredients();\n\n      if (result) {\n        ingredients = await result.json();\n      }\n\n      await setIngredients(ingredients);\n    };\n\n    getIngredients();\n\n    setIsShowing(false);\n\n    return () => clearTimeout(timeoutId);\n  }, [isAdding]);\n\n  return (\n    <>\n      <Box component='section'>\n        <Typography variant='h3' color='initial'>\n          Доступные ингредиенты\n        </Typography>\n\n        <Grid container alignItems='center'>\n          <Grid\n            container\n            direction='column'\n            alignItems='center'\n            justify='center'\n          >\n            {isLoading && <CircularProgress />}\n            {isLoading && <p>Загрузка данных с сервера...</p>}\n            {isError && <p>Что-то пошло не так... </p>}\n          </Grid>\n          {ingredients.map(ingredient => {\n            return (\n              <Fragment key={ingredient.id}>\n                <Grid container justify='center'>\n                  <Grid\n                    container\n                    direction='row'\n                    justify='center'\n                    alignItems='center'\n                    spacing={3}\n                  >\n                    <Grid item sm={2}>\n                      {ingredient.name}\n                    </Grid>\n                    <Grid item sm={4}>\n                      <ButtonGroup\n                        id={ingredient.id}\n                        variant='text'\n                        color='primary'\n                        aria-label='outlined primary button group'\n                      >\n                        {!isShowing || !(selectedId === ingredient.id) ? (\n                          <Button type='button' onClick={showIngredient}>\n                            Показать\n                          </Button>\n                        ) : (\n                          <Button type='button' onClick={unshowIngredient}>\n                            Убрать\n                          </Button>\n                        )}\n                        {isCancel || !(selectedId === ingredient.id) ? (\n                          <Button\n                            color='inherit'\n                            type='button'\n                            onClick={editIngredient}\n                          >\n                            Редактировать\n                          </Button>\n                        ) : (\n                          <Button\n                            color='inherit'\n                            type='button'\n                            onClick={cancelEditingIngredient}\n                          >\n                            Отменить\n                          </Button>\n                        )}\n                        <Button\n                          type='button'\n                          color='secondary'\n                          onClick={deleteIngredient}\n                        >\n                          Удалить\n                        </Button>\n                      </ButtonGroup>\n                    </Grid>\n                  </Grid>\n                  {isShowing && selectedId === ingredient.id\n                    ? ingredient && (\n                        <Grid item sm={6}>\n                          <Grid container justify='center' direction='column'>\n                            <div>Название: {ingredient.name}</div>\n                            <div>Цена: {ingredient.price} руб</div>\n                            <div>Категория: {ingredient.category}</div>\n                          </Grid>\n                        </Grid>\n                      )\n                    : null}\n\n                  {!isCancel && isEditing && selectedId === ingredient.id ? (\n                    <Grid item sm={6}>\n                      <Grid container justify='center' direction='column'>\n                        <EditIngredientForm\n                          editingIngredient={ingredient.name}\n                          ingredient={ingredient}\n                          ingredientId={selectedId}\n                          setIsCancel={setIsCancel}\n                          setIsEditing={setIsEditing}\n                        />\n                      </Grid>\n                    </Grid>\n                  ) : null}\n                </Grid>\n              </Fragment>\n            );\n          })}\n        </Grid>\n      </Box>\n\n      <section>\n        {!isCreating && (\n          <button type='button' onClick={createNewIngredient}>\n            Создать новый ингредиент\n          </button>\n        )}\n\n        <p>\n          {isCreating && (\n            <NewIngredientForm\n              isCreating={isCreating}\n              cancelCreatingNewIngredient={cancelCreatingNewIngredient}\n              setIsAdding={setIsAdding}\n            />\n          )}\n          {isAdding && <p>Новый ингредиент успешно добавлен</p>}\n        </p>\n        {isCreating && (\n          <button type='button' onClick={cancelCreatingNewIngredient}>\n            Отменить\n          </button>\n        )}\n      </section>\n    </>\n  );\n};\n","F:\\artem-pizza\\admin\\src\\api.ts",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\NewIngredientForm.tsx",[],"F:\\artem-pizza\\admin\\src\\IngredientsListPage\\components\\EditIngredientForm.tsx",["36","37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":11,"column":3,"nodeType":"45","messageId":"46","endLine":11,"endColumn":12},{"ruleId":"43","severity":1,"message":"47","line":18,"column":3,"nodeType":"45","messageId":"46","endLine":18,"endColumn":8},{"ruleId":"43","severity":1,"message":"48","line":6,"column":3,"nodeType":"45","messageId":"46","endLine":6,"endColumn":7},{"ruleId":"43","severity":1,"message":"49","line":9,"column":3,"nodeType":"45","messageId":"46","endLine":9,"endColumn":17},{"ruleId":"43","severity":1,"message":"50","line":16,"column":3,"nodeType":"45","messageId":"46","endLine":16,"endColumn":12},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'Grid' is defined but never used.","'FormHelperText' is defined but never used.","'TextField' is defined but never used.","no-global-assign","no-unsafe-negation"]