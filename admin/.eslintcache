[{"F:\\artem-pizza\\admin\\src\\index.tsx":"1","F:\\artem-pizza\\admin\\src\\App.tsx":"2","F:\\artem-pizza\\admin\\src\\api.ts":"3","F:\\artem-pizza\\admin\\src\\ingredients-list-page\\index.ts":"4","F:\\artem-pizza\\admin\\src\\ingredients-list-page\\IngredientsListPage.tsx":"5","F:\\artem-pizza\\admin\\src\\ingredients-list-page\\components\\NewIngredientForm.tsx":"6","F:\\artem-pizza\\admin\\src\\ingredients-list-page\\components\\EditIngredientForm.tsx":"7","F:\\artem-pizza\\admin\\src\\shared\\pizzaData.ts":"8","F:\\artem-pizza\\admin\\src\\shared\\style\\useFormStyles.ts":"9","F:\\artem-pizza\\admin\\src\\login-page\\index.ts":"10","F:\\artem-pizza\\admin\\src\\login-page\\LoginPage.tsx":"11","F:\\artem-pizza\\admin\\src\\signup-page\\index.ts":"12","F:\\artem-pizza\\admin\\src\\signup-page\\SignupPage.tsx":"13"},{"size":1147,"mtime":1611219464211,"results":"14","hashOfConfig":"15"},{"size":651,"mtime":1611219464201,"results":"16","hashOfConfig":"15"},{"size":1474,"mtime":1611219464205,"results":"17","hashOfConfig":"15"},{"size":37,"mtime":1611219464225,"results":"18","hashOfConfig":"15"},{"size":10608,"mtime":1611219464216,"results":"19","hashOfConfig":"15"},{"size":6251,"mtime":1611219464224,"results":"20","hashOfConfig":"15"},{"size":6849,"mtime":1611219464220,"results":"21","hashOfConfig":"15"},{"size":2821,"mtime":1611739416039,"results":"22","hashOfConfig":"15"},{"size":736,"mtime":1611219464233,"results":"23","hashOfConfig":"15"},{"size":27,"mtime":1611219464229,"results":"24","hashOfConfig":"15"},{"size":4085,"mtime":1611219464228,"results":"25","hashOfConfig":"15"},{"size":28,"mtime":1611219464237,"results":"26","hashOfConfig":"15"},{"size":3007,"mtime":1611219464237,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"vfnajk",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"F:\\artem-pizza\\admin\\src\\index.tsx",[],["58","59"],"F:\\artem-pizza\\admin\\src\\App.tsx",[],"F:\\artem-pizza\\admin\\src\\api.ts",["60"],"// Types\nimport { User } from './types';\n\nexport const root = 'http://localhost:4000';\n\nexport const api = Object.freeze({\n  ingredients: {\n    availableIngredients: () => {\n      return fetch(`${root}/ingredients`, { method: 'GET' });\n    },\n\n    createNewIngredient: (data: any) => {\n      return fetch(`${root}/ingredients`, {\n        method: 'POST',\n        body: data,\n      });\n    },\n\n    deleteIngredient: (ingredientId: string | null) => {\n      return fetch(`${root}/ingredients/${ingredientId}`, {\n        method: 'DELETE',\n      });\n    },\n\n    editIngredient: (data: any, ingredientId: string | null) => {\n      return fetch(`${root}/ingredients/${ingredientId}`, {\n        method: 'PUT',\n        body: data,\n      });\n    },\n\n    showIngredient: (ingredientId: string | null) => {\n      return fetch(`${root}/ingredients/${ingredientId}`, {\n        method: 'GET',\n      }).then(ingredient => ingredient.json());\n    },\n  },\n\n  user: {\n    create: (data: any) => {\n      return fetch(`${root}/user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n    },\n    login: (credentials: any) => {\n      return fetch(`${root}/user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          authorization: `Base ${credentials}`,\n        },\n        credentials: 'include',\n      }).then(token => token.json());\n    },\n  },\n});\n",["61","62"],"F:\\artem-pizza\\admin\\src\\ingredients-list-page\\index.ts",[],"F:\\artem-pizza\\admin\\src\\ingredients-list-page\\IngredientsListPage.tsx",[],"F:\\artem-pizza\\admin\\src\\ingredients-list-page\\components\\NewIngredientForm.tsx",[],"F:\\artem-pizza\\admin\\src\\ingredients-list-page\\components\\EditIngredientForm.tsx",[],"F:\\artem-pizza\\admin\\src\\shared\\pizzaData.ts",[],"F:\\artem-pizza\\admin\\src\\shared\\style\\useFormStyles.ts",[],"F:\\artem-pizza\\admin\\src\\login-page\\index.ts",[],"F:\\artem-pizza\\admin\\src\\login-page\\LoginPage.tsx",["63"],"import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from 'react-query';\nimport * as yup from 'yup';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// Api\nimport { api } from '../api';\n// Types\nimport { User } from '../types';\n// Styles\nimport {\n  Grid,\n  Typography,\n  FormControl,\n  Button,\n  Input,\n  FormLabel,\n  Box,\n} from '@material-ui/core';\nimport { useFormStyles } from '../shared/style/useFormStyles';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Неверный адрес электронной почты')\n    .required('Почта - обязательное поле'),\n  password: yup\n    .string()\n    .min(6, 'Слишком короткий пароль')\n    .required('Пароль - обязательное поле'),\n});\n\nexport const LoginPage = () => {\n  const [isSignup, setIsSignup] = useState(false);\n  const history = useHistory();\n  const styles = useFormStyles();\n  const { mutateAsync: loginUser } = useMutation((data: any) =>\n    api.user.login(data)\n  );\n  const { handleSubmit, errors, control } = useForm<User>({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = handleSubmit(async data => {\n    const result = await loginUser(data);\n    // TODO: если проверка успешна переход на страницу ингредиентов\n    if (true) {\n      history.push('/ingredients-list');\n    }\n    // TODO: если проверка не проходит повторная проверка\n    if (false) {\n    }\n    // TODO: если пользователь не зарегистрирован -> переход на страницу регистрации\n    if (false) {\n      setIsSignup(true);\n    }\n  });\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      history.push('/signup');\n      setIsSignup(false);\n    }, 1500);\n\n    return () => {\n      clearTimeout(id);\n    };\n  });\n\n  const toRegistration = () => {\n    history.push('/signup')\n  }\n\n  return (\n    <Grid container component='section' justify='center'>\n      {isSignup && <div>Вы не зарегистрированы. Пройдите регистрацию</div>}\n      <Typography variant='h3'>Регистрация пользователя</Typography>\n      <Grid container justify='center'>\n        <form onSubmit={onSubmit}>\n          <Grid container justify='center' direction='column'>\n            <FormControl className={styles.formControl}>\n              <FormLabel htmlFor='email'>Электронная почта </FormLabel>\n              <Controller\n                as={<Input className={styles.input} error={!!errors.email} />}\n                control={control}\n                id='email'\n                name='email'\n              />\n              {errors.email && (\n                <Box className={styles.errorMessage}>\n                  {errors.email?.message}\n                </Box>\n              )}\n            </FormControl>\n            <FormControl className={styles.formControl}>\n              <FormLabel htmlFor='password'>Пароль </FormLabel>\n              <Controller\n                as={\n                  <Input className={styles.input} error={!!errors.password} />\n                }\n                control={control}\n                id='password'\n                type='text'\n                name='password'\n              />\n              {errors.password && (\n                <Box className={styles.errorMessage}>\n                  {errors.password?.message}\n                </Box>\n              )}\n            </FormControl>\n            <Button type='submit' variant='outlined'>\n              Войти\n            </Button>\n          </Grid>\n        </form>\n      </Grid>\n      <Grid container justify='center'>\n        <Button variant='outlined' onClick={toRegistration}>\n          Зарегистрироваться\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n","F:\\artem-pizza\\admin\\src\\signup-page\\index.ts",[],"F:\\artem-pizza\\admin\\src\\signup-page\\SignupPage.tsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":10,"nodeType":"70","messageId":"71","endLine":2,"endColumn":14},{"ruleId":"64","replacedBy":"72"},{"ruleId":"66","replacedBy":"73"},{"ruleId":"68","severity":1,"message":"74","line":50,"column":11,"nodeType":"70","messageId":"71","endLine":50,"endColumn":17},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"@typescript-eslint/no-unused-vars","'User' is defined but never used.","Identifier","unusedVar",["75"],["76"],"'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]