{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nexport const initialState = {\n  order: null,\n  error: null,\n  isLoading: false,\n  isAccepted: true\n};\nexport const sendOrderAsync = createAsyncThunk('checkout/sendOrderAsync', async (data, thunkAPI) => {\n  const response = await api.orders.createOrder(data);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(checkoutReducer.actions.setAccept(resultsmessage));\n    console.log('message>>>', message);\n    return message;\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(checkoutReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(checkoutReducer.actions.stopFetching());\n});\nexport const checkoutReducer = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillOrder: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setAccept: (state, action) => {\n      state.isAccepted = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [sendOrderAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [sendOrderAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [sendOrderAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/checkout-page/state/checkoutReducer.js"],"names":["createSlice","createAsyncThunk","api","initialState","order","error","isLoading","isAccepted","sendOrderAsync","data","thunkAPI","response","orders","createOrder","status","results","json","dispatch","checkoutReducer","actions","setAccept","resultsmessage","console","log","message","setFetchingError","stopFetching","name","reducers","state","action","payload","fillOrder","extraReducers","fulfilled","rejected","pending"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nexport const initialState = {\n  order: null,\n  error: null,\n  isLoading: false,\n  isAccepted: true,\n};\n\nexport const sendOrderAsync = createAsyncThunk(\n  'checkout/sendOrderAsync',\n  async (data, thunkAPI) => {\n    const response = await api.orders.createOrder(data);\n    if (response.status === 200) {\n      const results = await response.json();\n      thunkAPI.dispatch(checkoutReducer.actions.setAccept(resultsmessage));\n      console.log('message>>>', message);\n      return message;\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(checkoutReducer.actions.setFetchingError(error));\n    }\n    thunkAPI.dispatch(checkoutReducer.actions.stopFetching());\n  }\n);\n\nexport const checkoutReducer = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillOrder: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setAccept: (state, action) => {\n      state.isAccepted = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [sendOrderAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [sendOrderAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [sendOrderAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}