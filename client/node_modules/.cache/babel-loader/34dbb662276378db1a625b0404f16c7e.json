{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  login: {\n    password: '',\n    email: ''\n  },\n  isRegistered: null,\n  isLoading: false,\n  error: null\n};\nexport const checkUserAsync = createAsyncThunk('login/loginFetchAsync', async (credentials, thunkAPI) => {\n  thunkAPI.dispatch(loginReducer.actions.startFetching);\n  const response = await api.users.login(credentials);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(loginReducer.setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(loginReducer.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(loginReducer.stopFetching());\n});\nexport const loginReducer = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [checkUserAsync.fulfilled]: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [checkUserAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [checkUserAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/login-page/state/loginReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","login","password","email","isRegistered","isLoading","error","checkUserAsync","credentials","thunkAPI","dispatch","loginReducer","actions","startFetching","response","users","status","results","json","setUserStatus","setFetchingError","stopFetching","name","reducers","state","action","payload","fillUserData","extraReducers","fulfilled","rejected","pending"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  login: { password: '', email: '' },\n  isRegistered: null,\n  isLoading: false,\n  error: null,\n};\n\nexport const checkUserAsync = createAsyncThunk(\n  'login/loginFetchAsync',\n  async (credentials, thunkAPI) => {\n    thunkAPI.dispatch(loginReducer.actions.startFetching);\n    const response = await api.users.login(credentials);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(loginReducer.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(loginReducer.setFetchingError(error));\n    }\n    thunkAPI.dispatch(loginReducer.stopFetching());\n  }\n);\n\nexport const loginReducer = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [checkUserAsync.fulfilled]: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [checkUserAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [checkUserAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}