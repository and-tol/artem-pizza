{"ast":null,"code":"import { createReducer, createSlice } from '@reduxjs/toolkit'; // ActionTypes\n\nimport { ordersListActionTypes } from './ordersListActionTypes';\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null\n};\nexport const fetchOrdersAsync = createAsyncThunk(ordersListActionTypes.ORDERS_FETCH_ASYNC, async (_, thunkAPI) => {\n  const response = await api.orders.getAllOrders();\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(fillOrders(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/state/ordersListReducer.js"],"names":["createReducer","createSlice","ordersListActionTypes","initialState","orders","isLoading","error","fetchOrdersAsync","createAsyncThunk","ORDERS_FETCH_ASYNC","_","thunkAPI","response","api","getAllOrders","status","results","json","dispatch","fillOrders","setFetchingError","stopFetching","ordersListReducer","name","reducers","startFetching","state","action","payload","ordersFill"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,kBAA3C,C,CACA;;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,gBAAgB,GAAGC,gBAAgB,CAC9CN,qBAAqB,CAACO,kBADwB,EAE9C,OAAOC,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACT,MAAJ,CAAWU,YAAX,EAAvB;;AAEA,MAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEAN,IAAAA,QAAQ,CAACO,QAAT,CAAkBC,UAAU,CAACH,OAAD,CAA5B;AACD,GAJD,MAIO;AACL,UAAMV,KAAK,GAAG;AACZS,MAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,KAAd;AAIAJ,IAAAA,QAAQ,CAACO,QAAT,CAAkBE,gBAAgB,CAACd,KAAD,CAAlC;AACD;;AAEDK,EAAAA,QAAQ,CAACO,QAAT,CAAkBG,YAAY,EAA9B;AACD,CAlB6C,CAAzC;AAqBP,OAAO,MAAMC,iBAAiB,GAAGrB,WAAW,CAAC;AAC3CsB,EAAAA,IAAI,EAAE,YADqC;AAE3CpB,EAAAA,YAF2C;AAG3CqB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAEC,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRgB,IAAAA,YAAY,EAAEK,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACD,KANO;AAORe,IAAAA,gBAAgB,EAAE,CAACM,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACD,KAVO;AAWRC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACtB,MAAN,GAAeuB,MAAM,CAACC,OAAtB;AACAF,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAc,IAAd;AACD;AAfO;AAHiC,CAAD,CAArC","sourcesContent":["import { createReducer, createSlice } from '@reduxjs/toolkit';\n// ActionTypes\nimport { ordersListActionTypes } from './ordersListActionTypes';\n\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n};\n\nexport const fetchOrdersAsync = createAsyncThunk(\n  ordersListActionTypes.ORDERS_FETCH_ASYNC,\n  async (_, thunkAPI) => {\n    const response = await api.orders.getAllOrders();\n\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(fillOrders(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n});\n"]},"metadata":{},"sourceType":"module"}