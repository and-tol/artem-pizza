{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null\n};\nexport const fetchOrdersListAsync = createAsyncThunk('orders/fetchOrdersListAsync', async (_, thunkAPI) => {\n  const response = await api.orders.getAllOrders();\n\n  if (response.status === 200) {\n    const orders = await response.json(); // thunkAPI.dispatch(ordersListReducer.actions.fillOrders(orders));\n\n    return orders;\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(ordersListReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(ordersListReducer.actions.stopFetching());\n});\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    } // ordersFill: (state, action) => {\n    //   state.orders = action.payload;\n    //   state.isLoading = false;\n    //   state.error = null;\n    // },\n\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/state/ordersListReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","orders","isLoading","error","fetchOrdersListAsync","_","thunkAPI","response","getAllOrders","status","json","dispatch","ordersListReducer","actions","setFetchingError","stopFetching","name","reducers","state","action","payload","extraReducers","fulfilled","order","rejected","pending"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,oBAAoB,GAAGP,gBAAgB,CAClD,6BADkD,EAElD,OAAOQ,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACE,MAAJ,CAAWO,YAAX,EAAvB;;AAEA,MAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMR,MAAM,GAAG,MAAMM,QAAQ,CAACG,IAAT,EAArB,CAD2B,CAG3B;;AAEA,WAAOT,MAAP;AACD,GAND,MAMO;AACL,UAAME,KAAK,GAAG;AACZM,MAAAA,MAAM,EAAEF,QAAQ,CAACE;AADL,KAAd;AAIAH,IAAAA,QAAQ,CAACK,QAAT,CAAkBC,iBAAiB,CAACC,OAAlB,CAA0BC,gBAA1B,CAA2CX,KAA3C,CAAlB;AACD;;AAEDG,EAAAA,QAAQ,CAACK,QAAT,CAAkBC,iBAAiB,CAACC,OAAlB,CAA0BE,YAA1B,EAAlB;AACD,CApBiD,CAA7C;AAuBP,OAAO,MAAMH,iBAAiB,GAAGd,WAAW,CAAC;AAC3CkB,EAAAA,IAAI,EAAE,YADqC;AAE3ChB,EAAAA,YAF2C;AAG3CiB,EAAAA,QAAQ,EAAE;AACRF,IAAAA,YAAY,EAAEG,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACD,KAHO;AAIRY,IAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACf,KAAN,GAAcgB,MAAM,CAACC,OAArB;AACD,KAPO,CAQR;AACA;AACA;AACA;AACA;;AAZQ,GAHiC;AAiB3CC,EAAAA,aAAa,EAAE;AACb,KAACjB,oBAAoB,CAACkB,SAAtB,GAAkC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACK,KAAN,GAAcJ,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACf,KAAN,GAAc,IAAd;AACD,KALY;AAMb,KAACC,oBAAoB,CAACoB,QAAtB,GAAkCN,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACf,KAAN,GAAc;AACZM,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAXY;AAYb,KAACL,oBAAoB,CAACqB,OAAtB,GAAgCP,KAAK,IAAI;AACvCA,MAAAA,KAAK,CAAChB,SAAN,GAAkB,IAAlB;AACD;AAdY;AAjB4B,CAAD,CAArC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n};\n\nexport const fetchOrdersListAsync = createAsyncThunk(\n  'orders/fetchOrdersListAsync',\n  async (_, thunkAPI) => {\n    const response = await api.orders.getAllOrders();\n\n    if (response.status === 200) {\n      const orders = await response.json();\n\n      // thunkAPI.dispatch(ordersListReducer.actions.fillOrders(orders));\n\n      return orders;\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      thunkAPI.dispatch(ordersListReducer.actions.setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(ordersListReducer.actions.stopFetching());\n  }\n);\n\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    // ordersFill: (state, action) => {\n    //   state.orders = action.payload;\n    //   state.isLoading = false;\n    //   state.error = null;\n    // },\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}