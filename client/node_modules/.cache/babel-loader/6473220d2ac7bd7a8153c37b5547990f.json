{"ast":null,"code":"// Api\nimport { api } from '../../../api'; // Types\n\n// ActionTypes\nimport { actionTypes } from './actionTypes';\nexport const signupActions = Object.freeze({\n  startFetching: () => {\n    return {\n      type: actionTypes.SIGNUP_START_FETCHING\n    };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.SIGNUP_STOP_FETCHING\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: actionTypes.SIGNUP_SET_FETCHING_ERROR,\n      payload: error\n    };\n  },\n  setUserStatus: status => {\n    return {\n      type: actionTypes.SIGNUP_SET_STATUS,\n      payload: status\n    };\n  },\n  fillUserData: payload => {\n    return {\n      type: actionTypes.SIGNUP_FILL,\n      payload\n    };\n  },\n\n  /**\n   * User check registation\n   * @param login -> password, email\n   */\n  userRegistationAsync: login => async dispatch => {\n    dispatch(signupActions.startFetching());\n    const response = await api.users.create(login);\n\n    if (response.status === 200) {\n      const results = await response.json();\n      dispatch(signupActions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status\n      };\n      dispatch(signupActions.setFetchingError(error));\n    }\n\n    dispatch(signupActions.stopFetching());\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/signup-page/state/actions.ts"],"names":["api","actionTypes","signupActions","Object","freeze","startFetching","type","SIGNUP_START_FETCHING","stopFetching","SIGNUP_STOP_FETCHING","setFetchingError","error","SIGNUP_SET_FETCHING_ERROR","payload","setUserStatus","status","SIGNUP_SET_STATUS","fillUserData","SIGNUP_FILL","userRegistationAsync","login","dispatch","response","users","create","results","json"],"mappings":"AAAA;AACA,SAASA,GAAT,QAAoB,cAApB,C,CACA;;AAEA;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc;AACzCC,EAAAA,aAAa,EAAE,MAAM;AACnB,WAAO;AAAEC,MAAAA,IAAI,EAAEL,WAAW,CAACM;AAApB,KAAP;AACD,GAHwC;AAIzCC,EAAAA,YAAY,EAAE,MAAM;AAClB,WAAO;AACLF,MAAAA,IAAI,EAAEL,WAAW,CAACQ;AADb,KAAP;AAGD,GARwC;AASzCC,EAAAA,gBAAgB,EAAGC,KAAD,IAAuB;AACvC,WAAO;AACLL,MAAAA,IAAI,EAAEL,WAAW,CAACW,yBADb;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAdwC;AAgBzCG,EAAAA,aAAa,EAAGC,MAAD,IAAiB;AAC9B,WAAO;AACLT,MAAAA,IAAI,EAAEL,WAAW,CAACe,iBADb;AAELH,MAAAA,OAAO,EAAEE;AAFJ,KAAP;AAID,GArBwC;AAuBzCE,EAAAA,YAAY,EAAGJ,OAAD,IAAkB;AAC9B,WAAO;AACLP,MAAAA,IAAI,EAAEL,WAAW,CAACiB,WADb;AAELL,MAAAA;AAFK,KAAP;AAID,GA5BwC;;AA8BzC;AACF;AACA;AACA;AACEM,EAAAA,oBAAoB,EAAGC,KAAD,IAAgB,MAAOC,QAAP,IAAyB;AAC7DA,IAAAA,QAAQ,CAACnB,aAAa,CAACG,aAAd,EAAD,CAAR;AAEA,UAAMiB,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,KAAJ,CAAUC,MAAV,CAAiBJ,KAAjB,CAAvB;;AACA,QAAIE,QAAQ,CAACP,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMU,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AAEAL,MAAAA,QAAQ,CAACnB,aAAa,CAACY,aAAd,CAA4BW,OAA5B,CAAD,CAAR;AACD,KAJD,MAIO;AACL,YAAMd,KAAK,GAAG;AACZI,QAAAA,MAAM,EAAEO,QAAQ,CAACP;AADL,OAAd;AAGAM,MAAAA,QAAQ,CAACnB,aAAa,CAACQ,gBAAd,CAA+BC,KAA/B,CAAD,CAAR;AACD;;AACDU,IAAAA,QAAQ,CAACnB,aAAa,CAACM,YAAd,EAAD,CAAR;AACD;AAjDwC,CAAd,CAAtB","sourcesContent":["// Api\nimport { api } from '../../../api';\n// Types\nimport { ErrorState } from '../../../types';\n// ActionTypes\nimport { actionTypes } from './actionTypes';\n\nexport const signupActions = Object.freeze({\n  startFetching: () => {\n    return { type: actionTypes.SIGNUP_START_FETCHING };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.SIGNUP_STOP_FETCHING,\n    };\n  },\n  setFetchingError: (error: ErrorState) => {\n    return {\n      type: actionTypes.SIGNUP_SET_FETCHING_ERROR,\n      payload: error,\n    };\n  },\n\n  setUserStatus: (status: any) => {\n    return {\n      type: actionTypes.SIGNUP_SET_STATUS,\n      payload: status,\n    };\n  },\n\n  fillUserData: (payload: any) => {\n    return {\n      type: actionTypes.SIGNUP_FILL,\n      payload,\n    };\n  },\n\n  /**\n   * User check registation\n   * @param login -> password, email\n   */\n  userRegistationAsync: (login: any) => async (dispatch: any) => {\n    dispatch(signupActions.startFetching());\n\n    const response = await api.users.create(login);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      dispatch(signupActions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      dispatch(signupActions.setFetchingError(error));\n    }\n    dispatch(signupActions.stopFetching());\n  },\n});\n"]},"metadata":{},"sourceType":"module"}