{"ast":null,"code":"import { createReducer, createSlice } from '@reduxjs/toolkit';\nimport { signupActionTypes } from './signupActionTypes';\nconst initialState = {\n  error: null,\n  isRegistered: null,\n  isLoading: false,\n  login: {\n    password: '',\n    email: ''\n  }\n};\n/**\n * Action User check registation\n * @param login -> password, email\n */\n\nexport const userRegistationAsync = createAsyncThunk(signupActionTypes.SIGNUP_FETCH_ASYNC, async (login, thunkAPI) => {\n  const response = await api.users.create(login);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});\nexport const signupReducer = createSlice({\n  name: 'signup',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/signup-page/state/signupReducer.js"],"names":["createReducer","createSlice","signupActionTypes","initialState","error","isRegistered","isLoading","login","password","email","userRegistationAsync","createAsyncThunk","SIGNUP_FETCH_ASYNC","thunkAPI","response","api","users","create","status","results","json","dispatch","setUserStatus","setFetchingError","stopFetching","signupReducer","name","reducers","startFetching","state","action","payload","fillUserData"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,kBAA3C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,YAAY,EAAE,IAFK;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,KAAK,EAAE;AAAvB;AAJY,CAArB;AAOA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAGC,gBAAgB,CAClDT,iBAAiB,CAACU,kBADgC,EAElD,OAAOL,KAAP,EAAcM,QAAd,KAA2B;AACzB,QAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACC,KAAJ,CAAUC,MAAV,CAAiBV,KAAjB,CAAvB;;AACA,MAAIO,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAtB;AAEAP,IAAAA,QAAQ,CAACQ,QAAT,CAAkBC,aAAa,CAACH,OAAD,CAA/B;AACD,GAJD,MAIO;AACL,UAAMf,KAAK,GAAG;AACZc,MAAAA,MAAM,EAAEJ,QAAQ,CAACI;AADL,KAAd;AAGAL,IAAAA,QAAQ,CAACQ,QAAT,CAAkBE,gBAAgB,CAACnB,KAAD,CAAlC;AACD;;AACDS,EAAAA,QAAQ,CAACQ,QAAT,CAAkBG,YAAY,EAA9B;AACD,CAfiD,CAA7C;AAkBP,OAAO,MAAMC,aAAa,GAAGxB,WAAW,CAAC;AACvCyB,EAAAA,IAAI,EAAE,QADiC;AAEvCvB,EAAAA,YAFuC;AAGvCwB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAEC,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRkB,IAAAA,YAAY,EAAEK,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACD,KANO;AAORiB,IAAAA,gBAAgB,EAAE,CAACM,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACzB,KAAN,GAAc0B,MAAM,CAACC,OAArB;AACD,KAVO;AAWRC,IAAAA,YAAY,EAAC,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACtB,KAAN,GAAcuB,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACzB,KAAN,GAAc,IAAd;AACD,KAfO;AAgBRkB,IAAAA,aAAa,EAAE,CAACO,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACxB,YAAN,GAAqByB,MAAM,CAACC,OAA5B;AACAF,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACzB,KAAN,GAAc,IAAd;AACD;AApBO;AAH6B,CAAD,CAAjC","sourcesContent":["import { createReducer, createSlice } from '@reduxjs/toolkit';\nimport { signupActionTypes } from './signupActionTypes';\n\nconst initialState = {\n  error: null,\n  isRegistered: null,\n  isLoading: false,\n  login: { password: '', email: '' },\n};\n\n/**\n * Action User check registation\n * @param login -> password, email\n */\nexport const userRegistationAsync = createAsyncThunk(\n  signupActionTypes.SIGNUP_FETCH_ASYNC,\n  async (login, thunkAPI) => {\n    const response = await api.users.create(login);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n\nexport const signupReducer = createSlice({\n  name: 'signup',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData:(state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}