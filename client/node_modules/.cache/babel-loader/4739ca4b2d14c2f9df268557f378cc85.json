{"ast":null,"code":"import { createReducer, createSlice } from '@reduxjs/toolkit'; // ActionTypes\n\nimport { checkoutActionTypes } from './checkoutActionTypes';\nexport const initialState = {\n  order: null,\n  error: null,\n  isLoading: false,\n  isAccepted: true\n};\nconst checkoutSlice = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillOrder: (state, action) => {\n      state.isLoading = false;\n      state.order = action.payload;\n    },\n    setAccept: (state, action) => {\n      state.error = null;\n      state.isLoading = false;\n      state.isAccepted = action.payload;\n    }\n  }\n});\nexport const checkoutReducer = createReducer(initialState, builder => {\n  builder.addCase('checkout/sendOrderAsync/pending', state => {\n    state.isLoading = true;\n  }).addCase('checkout/sendOrderAsync/rejected', state => {\n    state.isLoading = false;\n    state.error = 'fetching error';\n  }).addCase(checkoutActionTypes.CHECKOUT_STOP_FETCHING, state => {\n    state.isLoading = false;\n  }).addCase(checkoutActionTypes.CHECKOUT_SET_FETCHING_ERROR, (state, action) => {\n    state.isLoading = false;\n    state.error = action.payload;\n  }).addCase(checkoutActionTypes.CHECKOUT_FILL, (state, action) => {\n    state.isLoading = false;\n    state.order = action.payload;\n  }).addCase(checkoutActionTypes.CHECKOUT_SET_ACCEPT, (state, action) => {\n    state.error = null;\n    state.isLoading = false;\n    state.isAccepted = action.payload;\n  });\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/checkout-page/state/checkoutReducer.js"],"names":["createReducer","createSlice","checkoutActionTypes","initialState","order","error","isLoading","isAccepted","checkoutSlice","name","reducers","stopFetching","state","setFetchingError","action","payload","fillOrder","setAccept","checkoutReducer","builder","addCase","CHECKOUT_STOP_FETCHING","CHECKOUT_SET_FETCHING_ERROR","CHECKOUT_FILL","CHECKOUT_SET_ACCEPT"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,kBAA3C,C,CACA;;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,IADmB;AAE1BC,EAAAA,KAAK,EAAE,IAFmB;AAG1BC,EAAAA,SAAS,EAAE,KAHe;AAI1BC,EAAAA,UAAU,EAAE;AAJc,CAArB;AAOP,MAAMC,aAAa,GAAGP,WAAW,CAAC;AAChCQ,EAAAA,IAAI,EAAE,UAD0B;AAEhCN,EAAAA,YAFgC;AAGhCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAEC,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRO,IAAAA,gBAAgB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACnCF,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACP,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,KAPO;AAQRC,IAAAA,SAAS,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AAC5BF,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACC,OAArB;AACD,KAXO;AAYRE,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQE,MAAR,KAAmB;AAC5BF,MAAAA,KAAK,CAACP,KAAN,GAAc,IAAd;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,UAAN,GAAmBO,MAAM,CAACC,OAA1B;AACD;AAhBO;AAHsB,CAAD,CAAjC;AAuBA,OAAO,MAAMG,eAAe,GAAGlB,aAAa,CAACG,YAAD,EAAegB,OAAO,IAAI;AACpEA,EAAAA,OAAO,CACJC,OADH,CACW,iCADX,EAC8CR,KAAK,IAAI;AACnDA,IAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,GAHH,EAIGc,OAJH,CAIW,kCAJX,EAI+CR,KAAK,IAAI;AACpDA,IAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,IAAAA,KAAK,CAACP,KAAN,GAAc,gBAAd;AACD,GAPH,EAQGe,OARH,CAQWlB,mBAAmB,CAACmB,sBAR/B,EAQuDT,KAAK,IAAI;AAC5DA,IAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACD,GAVH,EAWGc,OAXH,CAYIlB,mBAAmB,CAACoB,2BAZxB,EAaI,CAACV,KAAD,EAAQE,MAAR,KAAmB;AACjBF,IAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,IAAAA,KAAK,CAACP,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,GAhBL,EAkBGK,OAlBH,CAkBWlB,mBAAmB,CAACqB,aAlB/B,EAkB8C,CAACX,KAAD,EAAQE,MAAR,KAAmB;AAC7DF,IAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,IAAAA,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACC,OAArB;AACD,GArBH,EAsBGK,OAtBH,CAsBWlB,mBAAmB,CAACsB,mBAtB/B,EAsBoD,CAACZ,KAAD,EAAQE,MAAR,KAAmB;AACnEF,IAAAA,KAAK,CAACP,KAAN,GAAc,IAAd;AACAO,IAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,IAAAA,KAAK,CAACL,UAAN,GAAmBO,MAAM,CAACC,OAA1B;AACD,GA1BH;AA2BD,CA5B2C,CAArC","sourcesContent":["import { createReducer, createSlice } from '@reduxjs/toolkit';\n// ActionTypes\nimport { checkoutActionTypes } from './checkoutActionTypes';\n\nexport const initialState = {\n  order: null,\n  error: null,\n  isLoading: false,\n  isAccepted: true,\n};\n\nconst checkoutSlice = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillOrder: (state, action) => {\n      state.isLoading = false;\n      state.order = action.payload;\n    },\n    setAccept: (state, action) => {\n      state.error = null;\n      state.isLoading = false;\n      state.isAccepted = action.payload;\n    },\n  },\n});\n\nexport const checkoutReducer = createReducer(initialState, builder => {\n  builder\n    .addCase('checkout/sendOrderAsync/pending', state => {\n      state.isLoading = true;\n    })\n    .addCase('checkout/sendOrderAsync/rejected', state => {\n      state.isLoading = false;\n      state.error = 'fetching error';\n    })\n    .addCase(checkoutActionTypes.CHECKOUT_STOP_FETCHING, state => {\n      state.isLoading = false;\n    })\n    .addCase(\n      checkoutActionTypes.CHECKOUT_SET_FETCHING_ERROR,\n      (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      }\n    )\n    .addCase(checkoutActionTypes.CHECKOUT_FILL, (state, action) => {\n      state.isLoading = false;\n      state.order = action.payload;\n    })\n    .addCase(checkoutActionTypes.CHECKOUT_SET_ACCEPT, (state, action) => {\n      state.error = null;\n      state.isLoading = false;\n      state.isAccepted = action.payload;\n    });\n});\n"]},"metadata":{},"sourceType":"module"}