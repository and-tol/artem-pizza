{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\artem-pizza\\\\client\\\\src\\\\pages\\\\checkout-page\\\\components\\\\CheckoutForm.test.jsx\";\nimport { fireEvent, render } from '@testing-library/react';\nimport React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport { Provider } from 'react-redux';\nimport { MemoryRouter } from 'react-router-dom';\nimport { CheckoutForm } from './CheckoutForm';\nimport { store } from '../../../init/store';\nimport { mockDefaultPizza } from '../../../testUtils/mockDefaultPizza';\ndescribe('CheckoutForm', () => {\n  it('renders correctly', () => {\n    const {\n      getByLabelText,\n      getByPlaceholderText,\n      getByRole\n    } = render( /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(MemoryRouter, {\n        children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n          pizza: mockDefaultPizza,\n          ingredients: []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this));\n    expect(getByPlaceholderText('Введите адрес')).toBeInTheDocument();\n    expect(getByLabelText('подъезд')).toBeInTheDocument();\n    expect(getByLabelText('этаж')).toBeInTheDocument();\n    expect(getByLabelText('квартира')).toBeInTheDocument();\n    expect(getByPlaceholderText('Номер карты')).toBeInTheDocument();\n    expect(getByPlaceholderText('MM/YYYY')).toBeInTheDocument();\n    expect(getByPlaceholderText('CVV')).toBeInTheDocument();\n    expect(getByPlaceholderText('Имя как на карте')).toBeInTheDocument();\n    expect(getByRole('button')).toBeInTheDocument();\n  });\n  describe('on card number change', () => {\n    it('breaks the card number into groups of four digits', () => {\n      const {\n        getByPlaceholderText\n      } = render( /*#__PURE__*/_jsxDEV(Provider, {\n        store: store,\n        children: /*#__PURE__*/_jsxDEV(MemoryRouter, {\n          children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n            pizza: mockDefaultPizza,\n            ingredients: []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this));\n      const inputCC = getByPlaceholderText('Номер карты');\n      fireEvent.input(inputCC, {\n        target: {\n          value: '1234123412341234'\n        }\n      });\n      expect(inputCC.value).toEqual('1234 1234 1234 1234');\n    });\n  });\n  describe('with invalid input address', () => {\n    it('renders the address validation error', async () => {\n      const {\n        getByRole,\n        queryAllByText\n      } = render( /*#__PURE__*/_jsxDEV(Provider, {\n        store: store,\n        children: /*#__PURE__*/_jsxDEV(MemoryRouter, {\n          children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n            pizza: mockDefaultPizza,\n            ingredients: []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this));\n      await act(async () => {\n        fireEvent.submit(getByRole('button'));\n      });\n      const div = queryAllByText(/Это обязательное поле/i);\n      expect(div[0]).toBeInTheDocument();\n      expect(div[1]).toBeInTheDocument();\n      expect(div[2]).toBeInTheDocument();\n    });\n  });\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/checkout-page/components/CheckoutForm.test.jsx"],"names":["fireEvent","render","React","act","Provider","MemoryRouter","CheckoutForm","store","mockDefaultPizza","describe","it","getByLabelText","getByPlaceholderText","getByRole","expect","toBeInTheDocument","inputCC","input","target","value","toEqual","queryAllByText","submit","div"],"mappings":"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","sourcesContent":["import { fireEvent, render } from '@testing-library/react';\nimport React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport { Provider } from 'react-redux';\nimport { MemoryRouter } from 'react-router-dom';\nimport { CheckoutForm } from './CheckoutForm';\nimport { store } from '../../../init/store';\n\nimport { mockDefaultPizza } from '../../../testUtils/mockDefaultPizza';\n\ndescribe('CheckoutForm', () => {\n  it('renders correctly', () => {\n    const { getByLabelText, getByPlaceholderText, getByRole } = render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <CheckoutForm pizza={mockDefaultPizza} ingredients={[]} />\n        </MemoryRouter>\n      </Provider>\n    );\n\n    expect(getByPlaceholderText('Введите адрес')).toBeInTheDocument();\n    expect(getByLabelText('подъезд')).toBeInTheDocument();\n    expect(getByLabelText('этаж')).toBeInTheDocument();\n    expect(getByLabelText('квартира')).toBeInTheDocument();\n\n    expect(getByPlaceholderText('Номер карты')).toBeInTheDocument();\n    expect(getByPlaceholderText('MM/YYYY')).toBeInTheDocument();\n    expect(getByPlaceholderText('CVV')).toBeInTheDocument();\n    expect(getByPlaceholderText('Имя как на карте')).toBeInTheDocument();\n\n    expect(getByRole('button')).toBeInTheDocument();\n  });\n\n  describe('on card number change', () => {\n    it('breaks the card number into groups of four digits', () => {\n      const { getByPlaceholderText } = render(\n        <Provider store={store}>\n          <MemoryRouter>\n            <CheckoutForm pizza={mockDefaultPizza} ingredients={[]} />\n          </MemoryRouter>\n        </Provider>\n      );\n\n      const inputCC = getByPlaceholderText('Номер карты');\n      fireEvent.input(inputCC, {\n        target: { value: '1234123412341234' },\n      });\n\n      expect(inputCC.value).toEqual('1234 1234 1234 1234');\n    });\n  });\n\n  describe('with invalid input address', () => {\n    it('renders the address validation error', async () => {\n      const { getByRole, queryAllByText } = render(\n        <Provider store={store}>\n          <MemoryRouter>\n            <CheckoutForm pizza={mockDefaultPizza} ingredients={[]} />\n          </MemoryRouter>\n        </Provider>\n      );\n\n      await act(async () => {\n        fireEvent.submit(getByRole('button'));\n      });\n\n      const div = queryAllByText(/Это обязательное поле/i);\n\n      expect(div[0]).toBeInTheDocument();\n      expect(div[1]).toBeInTheDocument();\n      expect(div[2]).toBeInTheDocument();\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}