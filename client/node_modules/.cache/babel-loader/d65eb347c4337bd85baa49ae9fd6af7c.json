{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nexport const initialState = {\n  order: null,\n  error: null,\n  isLoading: false,\n  isAccepted: true\n};\nexport const checkoutReducer = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillOrder: (state, action) => {\n      state.isLoading = false;\n      state.order = action.payload;\n    },\n    setAccept: (state, action) => {\n      state.error = null;\n      state.isLoading = false;\n      state.isAccepted = action.payload;\n    }\n  },\n  extraReducers: {\n    [sendOrderAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [sendOrderAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = 'fetching error';\n    },\n    [sendOrderAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});\nexport const sendOrderAsync = createAsyncThunk('checkout/sendOrderAsync', async (data, thunkAPI) => {\n  thunkAPI.dispatch(checkoutReducer.actions.startFetching());\n  const response = await api.orders.createOrder(data);\n\n  if (response.status === 200) {\n    const {\n      message\n    } = await response.json();\n    thunkAPI.dispatch(checkoutReducer.actions.fillOrder(message));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(checkoutReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(checkoutReducer.actions.stopFetching());\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/checkout-page/state/checkoutReducer.js"],"names":["createSlice","createAsyncThunk","api","initialState","order","error","isLoading","isAccepted","checkoutReducer","name","reducers","startFetching","state","stopFetching","setFetchingError","action","payload","fillOrder","setAccept","extraReducers","sendOrderAsync","fulfilled","rejected","pending","data","thunkAPI","dispatch","actions","response","orders","createOrder","status","message","json"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nexport const initialState = {\n  order: null,\n  error: null,\n  isLoading: false,\n  isAccepted: true,\n};\n\nexport const checkoutReducer = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillOrder: (state, action) => {\n      state.isLoading = false;\n      state.order = action.payload;\n    },\n    setAccept: (state, action) => {\n      state.error = null;\n      state.isLoading = false;\n      state.isAccepted = action.payload;\n    },\n  },\n  extraReducers: {\n    [sendOrderAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [sendOrderAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = 'fetching error';\n    },\n    [sendOrderAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n\nexport const sendOrderAsync = createAsyncThunk(\n  'checkout/sendOrderAsync',\n  async (data, thunkAPI) => {\n    thunkAPI.dispatch(checkoutReducer.actions.startFetching());\n    const response = await api.orders.createOrder(data);\n    if (response.status === 200) {\n      const { message } = await response.json();\n      thunkAPI.dispatch(checkoutReducer.actions.fillOrder(message));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(checkoutReducer.actions.setFetchingError(error));\n    }\n    thunkAPI.dispatch(checkoutReducer.actions.stopFetching());\n  }\n);\n"]},"metadata":{},"sourceType":"module"}