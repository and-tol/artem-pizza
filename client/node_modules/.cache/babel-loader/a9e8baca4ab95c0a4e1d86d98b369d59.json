{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  ingredients: [{\n    id: '0',\n    name: '30',\n    slug: '30',\n    price: 200,\n    category: 'size',\n    image: '',\n    thumbnail: ''\n  }, {\n    category: 'dough',\n    id: '1',\n    image: '',\n    name: 'Тонкое',\n    price: 0,\n    slug: 'thin',\n    thumbnail: ''\n  }, {\n    category: 'sauce',\n    id: '2',\n    image: '',\n    name: 'Томатный',\n    price: 0,\n    slug: 'tomato-sauce',\n    thumbnail: ''\n  }],\n  error: null,\n  isLoading: false\n};\nexport const fetchIngredientsAsync = createAsyncThunk('ingredientsActionTypes.INGREDIENTS_FETCH_ASYNC', async (_, thunkAPI) => {\n  const response = await api.ingredients.availableIngredients();\n\n  if (response.status === 200) {\n    const results = await response.json();\n    const resultsWithCorrectTypes = results.map(item => ({ ...item,\n      price: Number(item.price)\n    }));\n    thunkAPI.dispatch(fillIngredients(resultsWithCorrectTypes));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});\nexport const ingredientsReducer = createSlice({\n  name: 'ingreddients',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillIngredients: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/pizza-configurator-page/state-ingredients/ingredientsReducer.js"],"names":["createAsyncThunk","createSlice","initialState","ingredients","id","name","slug","price","category","image","thumbnail","error","isLoading","fetchIngredientsAsync","_","thunkAPI","response","api","availableIngredients","status","results","json","resultsWithCorrectTypes","map","item","Number","dispatch","fillIngredients","setFetchingError","stopFetching","ingredientsReducer","reducers","startFetching","state","action","payload"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n\n\nconst initialState = {\n  ingredients: [\n    {\n      id: '0',\n      name: '30',\n      slug: '30',\n      price: 200,\n      category: 'size',\n      image: '',\n      thumbnail: '',\n    },\n    {\n      category: 'dough',\n      id: '1',\n      image: '',\n      name: 'Тонкое',\n      price: 0,\n      slug: 'thin',\n      thumbnail: '',\n    },\n    {\n      category: 'sauce',\n      id: '2',\n      image: '',\n      name: 'Томатный',\n      price: 0,\n      slug: 'tomato-sauce',\n      thumbnail: '',\n    },\n  ],\n  error: null,\n  isLoading: false,\n};\n\nexport const fetchIngredientsAsync = createAsyncThunk(\n  'ingredientsActionTypes.INGREDIENTS_FETCH_ASYNC',\n  async (_, thunkAPI) => {\n    const response = await api.ingredients.availableIngredients();\n\n    if (response.status === 200) {\n      const results = await response.json();\n\n      const resultsWithCorrectTypes = results.map(item => ({\n        ...item,\n        price: Number(item.price),\n      }));\n\n      thunkAPI.dispatch(fillIngredients(resultsWithCorrectTypes));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n\n\nexport const ingredientsReducer = createSlice({\n  name: 'ingreddients',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillIngredients: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}