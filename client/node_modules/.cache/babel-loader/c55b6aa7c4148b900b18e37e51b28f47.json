{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api'; // ActionTypes\n\nimport { signupActionTypes } from './signupActionTypes';\nexport const stopFetching = createAction(signupActionTypes.SIGNUP_STOP_FETCHING);\nexport const setFetchingError = createAction(signupActionTypes.SIGNUP_SET_FETCHING_ERROR);\nexport const setUserStatus = createAction(signupActionTypes.SIGNUP_SET_STATUS);\nexport const fillUserData = createAction(signupActionTypes.SIGNUP_FIL);\n/**\n * Action User check registation\n * @param login -> password, email\n */\n\nexport const userRegistationAsync = createAsyncThunk(signupActionTypes.SIGNUP_FETCH_ASYNC, async (login, thunkAPI) => {\n  const response = await api.users.create(login);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/signup-page/state/signupActions.js"],"names":["createAction","createAsyncThunk","api","signupActionTypes","stopFetching","SIGNUP_STOP_FETCHING","setFetchingError","SIGNUP_SET_FETCHING_ERROR","setUserStatus","SIGNUP_SET_STATUS","fillUserData","SIGNUP_FIL","userRegistationAsync","SIGNUP_FETCH_ASYNC","login","thunkAPI","response","users","create","status","results","json","dispatch","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB,C,CACA;;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,MAAMC,YAAY,GAAGJ,YAAY,CACtCG,iBAAiB,CAACE,oBADoB,CAAjC;AAIP,OAAO,MAAMC,gBAAgB,GAAGN,YAAY,CAC1CG,iBAAiB,CAACI,yBADwB,CAArC;AAIP,OAAO,MAAMC,aAAa,GAAGR,YAAY,CAACG,iBAAiB,CAACM,iBAAnB,CAAlC;AAEP,OAAO,MAAMC,YAAY,GAAGV,YAAY,CAACG,iBAAiB,CAACQ,UAAnB,CAAjC;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAGX,gBAAgB,CAClDE,iBAAiB,CAACU,kBADgC,EAElD,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACzB,QAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,KAAJ,CAAUC,MAAV,CAAiBJ,KAAjB,CAAvB;;AACA,MAAIE,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEAN,IAAAA,QAAQ,CAACO,QAAT,CAAkBd,aAAa,CAACY,OAAD,CAA/B;AACD,GAJD,MAIO;AACL,UAAMG,KAAK,GAAG;AACZJ,MAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,KAAd;AAGAJ,IAAAA,QAAQ,CAACO,QAAT,CAAkBhB,gBAAgB,CAACiB,KAAD,CAAlC;AACD;;AACDR,EAAAA,QAAQ,CAACO,QAAT,CAAkBlB,YAAY,EAA9B;AACD,CAfiD,CAA7C","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n// ActionTypes\nimport { signupActionTypes } from './signupActionTypes';\n\nexport const stopFetching = createAction(\n  signupActionTypes.SIGNUP_STOP_FETCHING\n);\n\nexport const setFetchingError = createAction(\n  signupActionTypes.SIGNUP_SET_FETCHING_ERROR\n);\n\nexport const setUserStatus = createAction(signupActionTypes.SIGNUP_SET_STATUS);\n\nexport const fillUserData = createAction(signupActionTypes.SIGNUP_FIL);\n\n/**\n * Action User check registation\n * @param login -> password, email\n */\nexport const userRegistationAsync = createAsyncThunk(\n  signupActionTypes.SIGNUP_FETCH_ASYNC,\n  async (login, thunkAPI) => {\n    const response = await api.users.create(login);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n"]},"metadata":{},"sourceType":"module"}