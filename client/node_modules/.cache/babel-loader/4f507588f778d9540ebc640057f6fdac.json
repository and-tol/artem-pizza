{"ast":null,"code":"import { createReducer, createSlice } from '@reduxjs/toolkit'; // ActionTypes\n\nimport { loginActionTypes } from './loginActionTypes';\nconst initialState = {\n  login: {\n    password: '',\n    email: ''\n  },\n  isRegistered: null,\n  isLoading: false,\n  error: null\n};\nexport const login = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    loginFill: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    loginSetStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    extraReducers: {}\n  }\n});\nexport const loginReducer = createReducer(initialState, builder => {\n  builder.addCase('login/checkUserAsync/pending', state => {\n    state.isLoading = true;\n  }).addCase('login/checkUserAsync/rejected', state => {\n    state.isLoading = false;\n    state.error = 'fetching error';\n  }).addCase(loginActionTypes.LOGIN_STOP_FETCHING, state => {\n    state.isLoading = false;\n  }).addCase(loginActionTypes.LOGIN_FILL, (state, action) => {\n    state.login = action.payload;\n    state.isLoading = false;\n    state.error = null;\n  }).addCase(loginActionTypes.LOGIN_SET_STATUS, (state, action) => {\n    state.isRegistered = action.payload;\n    state.isLoading = false;\n    state.error = null;\n  });\n});\nexport const checkUserAsync = createAsyncThunk(loginActionTypes.LOGIN_FETCH_ASYNC, async (credentials, thunkAPI) => {\n  const response = await api.users.login(credentials);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/login-page/state/loginReducer.js"],"names":["createReducer","createSlice","loginActionTypes","initialState","login","password","email","isRegistered","isLoading","error","name","reducers","startFetching","state","stopFetching","setFetchingError","action","payload","loginFill","loginSetStatus","extraReducers","loginReducer","builder","addCase","LOGIN_STOP_FETCHING","LOGIN_FILL","LOGIN_SET_STATUS","checkUserAsync","createAsyncThunk","LOGIN_FETCH_ASYNC","credentials","thunkAPI","response","api","users","status","results","json","dispatch","setUserStatus"],"mappings":"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","sourcesContent":["import { createReducer, createSlice } from '@reduxjs/toolkit';\n// ActionTypes\nimport { loginActionTypes } from './loginActionTypes';\n\nconst initialState = {\n  login: { password: '', email: '' },\n  isRegistered: null,\n  isLoading: false,\n  error: null,\n};\n\nexport const login = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    loginFill: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    loginSetStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    extraReducers:{}\n  },\n});\n\nexport const loginReducer = createReducer(initialState, builder => {\n  builder\n    .addCase('login/checkUserAsync/pending', state => {\n      state.isLoading = true;\n    })\n    .addCase('login/checkUserAsync/rejected', state => {\n      state.isLoading = false;\n      state.error = 'fetching error';\n    })\n    .addCase(loginActionTypes.LOGIN_STOP_FETCHING, state => {\n      state.isLoading = false;\n    })\n    .addCase(loginActionTypes.LOGIN_FILL, (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    })\n    .addCase(loginActionTypes.LOGIN_SET_STATUS, (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    });\n});\n\nexport const checkUserAsync = createAsyncThunk(\n  loginActionTypes.LOGIN_FETCH_ASYNC,\n  async (credentials, thunkAPI) => {\n    const response = await api.users.login(credentials);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n    thunkAPI.dispatch(stopFetching());\n  }\n);"]},"metadata":{},"sourceType":"module"}