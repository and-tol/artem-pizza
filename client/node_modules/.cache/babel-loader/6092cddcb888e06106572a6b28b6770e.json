{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  error: null,\n  isRegistered: null,\n  isLoading: false,\n  login: {\n    password: '',\n    email: ''\n  }\n};\n/**\n * Action User check registation\n * @param login -> password, email\n */\n\nexport const userSingupAsync = createAsyncThunk('signup/signupFetchAsync', async (login, thunkAPI) => {\n  thunkAPI.dispatch(signupReducer.actions.startFetching());\n  const response = await api.users.create(login);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(signupReducer.actions.setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(signupReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(signupReducer.actions.stopFetching());\n});\nexport const signupReducer = createSlice({\n  name: 'signup',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    extraReducers: {\n      [userSingupAsync.fulfilled]: (state, action) => {}\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/signup-page/state/signupReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","error","isRegistered","isLoading","login","password","email","userSingupAsync","thunkAPI","dispatch","signupReducer","actions","startFetching","response","users","create","status","results","json","setUserStatus","setFetchingError","stopFetching","name","reducers","state","action","payload","fillUserData","extraReducers","fulfilled"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,YAAY,EAAE,IAFK;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,KAAK,EAAE;AAAvB;AAJY,CAArB;AAOA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAGV,gBAAgB,CAC7C,yBAD6C,EAE7C,OAAOO,KAAP,EAAcI,QAAd,KAA2B;AACzBA,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,aAAa,CAACC,OAAd,CAAsBC,aAAtB,EAAlB;AACA,QAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,KAAJ,CAAUC,MAAV,CAAiBX,KAAjB,CAAvB;;AACA,MAAIS,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEAV,IAAAA,QAAQ,CAACC,QAAT,CAAkBC,aAAa,CAACC,OAAd,CAAsBQ,aAAtB,CAAoCF,OAApC,CAAlB;AACD,GAJD,MAIO;AACL,UAAMhB,KAAK,GAAG;AACZe,MAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,KAAd;AAGAR,IAAAA,QAAQ,CAACC,QAAT,CAAkBC,aAAa,CAACC,OAAd,CAAsBS,gBAAtB,CAAuCnB,KAAvC,CAAlB;AACD;;AACDO,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,aAAa,CAACC,OAAd,CAAsBU,YAAtB,EAAlB;AACD,CAhB4C,CAAxC;AAmBP,OAAO,MAAMX,aAAa,GAAGZ,WAAW,CAAC;AACvCwB,EAAAA,IAAI,EAAE,QADiC;AAEvCtB,EAAAA,YAFuC;AAGvCuB,EAAAA,QAAQ,EAAE;AACRX,IAAAA,aAAa,EAAEY,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRkB,IAAAA,YAAY,EAAEG,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACD,KANO;AAORiB,IAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACvB,KAAN,GAAcwB,MAAM,CAACC,OAArB;AACD,KAVO;AAWRC,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACpB,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACvB,KAAN,GAAc,IAAd;AACD,KAfO;AAgBRkB,IAAAA,aAAa,EAAE,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACtB,YAAN,GAAqBuB,MAAM,CAACC,OAA5B;AACAF,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACvB,KAAN,GAAc,IAAd;AACD,KApBO;AAqBR2B,IAAAA,aAAa,EAAE;AACb,OAACrB,eAAe,CAACsB,SAAjB,GAA6B,CAACL,KAAD,EAAQC,MAAR,KAAmB,CAE/C;AAHY;AArBP;AAH6B,CAAD,CAAjC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  error: null,\n  isRegistered: null,\n  isLoading: false,\n  login: { password: '', email: '' },\n};\n\n/**\n * Action User check registation\n * @param login -> password, email\n */\nexport const userSingupAsync = createAsyncThunk(\n  'signup/signupFetchAsync',\n  async (login, thunkAPI) => {\n    thunkAPI.dispatch(signupReducer.actions.startFetching());\n    const response = await api.users.create(login);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(signupReducer.actions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(signupReducer.actions.setFetchingError(error));\n    }\n    thunkAPI.dispatch(signupReducer.actions.stopFetching());\n  }\n);\n\nexport const signupReducer = createSlice({\n  name: 'signup',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    extraReducers: {\n      [userSingupAsync.fulfilled]: (state, action) => {\n        \n      }\n    }\n  },\n});\n"]},"metadata":{},"sourceType":"module"}