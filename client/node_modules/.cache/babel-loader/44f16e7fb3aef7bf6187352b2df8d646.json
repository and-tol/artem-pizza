{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null\n};\nexport const fetchOrdersListAsync = createAsyncThunk('ordersListActionTypes.ORDERS_FETCH_ASYNC', async (_, thunkAPI) => {\n  const response = await api.orders.getAllOrders();\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(fillOrders(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/state/ordersListReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","orders","isLoading","error","fetchOrdersListAsync","_","thunkAPI","response","getAllOrders","status","results","json","dispatch","fillOrders","setFetchingError","stopFetching","ordersListReducer","name","reducers","startFetching","state","action","payload","ordersFill","extraReducers","fulfilled","order","rejected","pending"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,oBAAoB,GAAGP,gBAAgB,CAClD,0CADkD,EAElD,OAAOQ,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACE,MAAJ,CAAWO,YAAX,EAAvB;;AAEA,MAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AAEAL,IAAAA,QAAQ,CAACM,QAAT,CAAkBC,UAAU,CAACH,OAAD,CAA5B;AACD,GAJD,MAIO;AACL,UAAMP,KAAK,GAAG;AACZM,MAAAA,MAAM,EAAEF,QAAQ,CAACE;AADL,KAAd;AAIAH,IAAAA,QAAQ,CAACM,QAAT,CAAkBE,gBAAgB,CAACX,KAAD,CAAlC;AACD;;AAEDG,EAAAA,QAAQ,CAACM,QAAT,CAAkBG,YAAY,EAA9B;AACD,CAlBiD,CAA7C;AAqBP,OAAO,MAAMC,iBAAiB,GAAGlB,WAAW,CAAC;AAC3CmB,EAAAA,IAAI,EAAE,YADqC;AAE3CjB,EAAAA,YAF2C;AAG3CkB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAEC,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAAClB,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRa,IAAAA,YAAY,EAAEK,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACD,KANO;AAORY,IAAAA,gBAAgB,EAAE,CAACM,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAckB,MAAM,CAACC,OAArB;AACD,KAVO;AAWRC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACnB,MAAN,GAAeoB,MAAM,CAACC,OAAtB;AACAF,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc,IAAd;AACD;AAfO,GAHiC;AAoB3CqB,EAAAA,aAAa,EAAE;AACb,KAACpB,oBAAoB,CAACqB,SAAtB,GAAkC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACM,KAAN,GAAcL,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc,IAAd;AACD,KALY;AAMb,KAACC,oBAAoB,CAACuB,QAAtB,GAAiC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc;AACZM,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAXY;AAYb,KAACL,oBAAoB,CAACwB,OAAtB,GAAgCR,KAAK,IAAI;AACvCA,MAAAA,KAAK,CAAClB,SAAN,GAAkB,IAAlB;AACD;AAdY;AApB4B,CAAD,CAArC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n};\n\nexport const fetchOrdersListAsync = createAsyncThunk(\n  'ordersListActionTypes.ORDERS_FETCH_ASYNC',\n  async (_, thunkAPI) => {\n    const response = await api.orders.getAllOrders();\n\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(fillOrders(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}