{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\artem-pizza\\\\client\\\\src\\\\pages\\\\orders-list-page\\\\OrdersListPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // Actions\n\nimport { fetchOrdersListAsync } from './state/ordersListReducer';\nimport { fetchIngredientsAsync } from '../pizza-configurator-page/state-ingredients/ingredientsReducer'; // Selectors\n\nimport { getOrders, getLoadingStatus } from './state/ordersListSelectors'; // Components\n\nimport { Order, Loader } from '../../share/components';\nimport { PreviousOrder } from './components';\nexport const OrdersListPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchIngredientsAsync());\n    dispatch(fetchOrdersListAsync());\n  }, [dispatch]);\n  const orders = useSelector(getOrders);\n  const isLoading = useSelector(getLoadingStatus);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: false ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : orders.length ? orders.map(order => /*#__PURE__*/_jsxDEV(PreviousOrder, {\n      order: order\n    }, order.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u0412\\u044B \\u043F\\u043E\\u043A\\u0430 \\u043D\\u0435 \\u0441\\u0434\\u0435\\u043B\\u0430\\u043B\\u0438 \\u043D\\u0438 \\u043E\\u0434\\u043D\\u043E\\u0433\\u043E \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(OrdersListPage, \"yP5fuMzp0F92K1TQ67IEUkTunW0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = OrdersListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersListPage\");","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/OrdersListPage.jsx"],"names":["React","useEffect","useDispatch","useSelector","fetchOrdersListAsync","fetchIngredientsAsync","getOrders","getLoadingStatus","Order","Loader","PreviousOrder","OrdersListPage","dispatch","orders","isLoading","length","map","order","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,qBAAT,QAAsC,iEAAtC,C,CACA;;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,6BAA5C,C,CACA;;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AACAO,IAAAA,QAAQ,CAACR,oBAAoB,EAArB,CAAR;AACD,GAHQ,EAGN,CAACQ,QAAD,CAHM,CAAT;AAKA,QAAMC,MAAM,GAAGV,WAAW,CAACG,SAAD,CAA1B;AACA,QAAMQ,SAAS,GAAGX,WAAW,CAACI,gBAAD,CAA7B;AAIA,sBACE;AAAA,cACG,qBACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADD,GAEGM,MAAM,CAACE,MAAP,GACFF,MAAM,CAACG,GAAP,CAAWC,KAAK,iBAAI,QAAC,aAAD;AAA8B,MAAA,KAAK,EAAEA;AAArC,OAAoBA,KAAK,CAACC,EAA1B;AAAA;AAAA;AAAA;AAAA,YAApB,CADE,gBAGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ,mBADF;AAWD,CAxBM;;GAAMP,c;UACMT,W,EAOFC,W,EACGA,W;;;KATPQ,c","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// Actions\nimport { fetchOrdersListAsync } from './state/ordersListReducer';\nimport { fetchIngredientsAsync } from '../pizza-configurator-page/state-ingredients/ingredientsReducer';\n// Selectors\nimport { getOrders, getLoadingStatus } from './state/ordersListSelectors';\n// Components\nimport { Order, Loader } from '../../share/components';\nimport { PreviousOrder } from './components'\n\nexport const OrdersListPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchIngredientsAsync());\n    dispatch(fetchOrdersListAsync());\n  }, [dispatch]);\n\n  const orders = useSelector(getOrders);\n  const isLoading = useSelector(getLoadingStatus);\n\n  \n\n  return (\n    <>\n      {false ? (\n        <Loader />\n      ) : orders.length ? (\n        orders.map(order => <PreviousOrder key={order.id} order={order} />)\n      ) : (\n        <span>Вы пока не сделали ни одного заказа</span>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}