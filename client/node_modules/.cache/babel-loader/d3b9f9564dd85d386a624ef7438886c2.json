{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  ingredients: [{\n    id: '0',\n    name: '30',\n    slug: '30',\n    price: 200,\n    category: 'size',\n    image: '',\n    thumbnail: ''\n  }, {\n    id: '1',\n    name: 'Тонкое',\n    slug: 'thin',\n    price: 0,\n    category: 'dough',\n    image: '',\n    thumbnail: ''\n  }, {\n    category: 'sauce',\n    id: '2',\n    image: '',\n    name: 'Томатный',\n    price: 0,\n    slug: 'tomato-sauce',\n    thumbnail: ''\n  }],\n  error: null,\n  isLoading: false\n};\nexport const fetchIngredientsAsync = createAsyncThunk('ingredients/ingredientsFetchAsync', async (_, thunkAPI) => {\n  thunkAPI.dispatch(ingredientsReducer.actions.startFetching);\n  const response = await api.ingredients.availableIngredients();\n\n  if (response.status === 200) {\n    const results = await response.json();\n    const resultsWithCorrectTypes = results.map(item => ({ ...item,\n      price: Number(item.price)\n    }));\n    thunkAPI.dispatch(ingredientsReducer.actions.fillIngredients(resultsWithCorrectTypes));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(ingredientsReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(ingredientsReducer.actions.stopFetching());\n});\nexport const ingredientsReducer = createSlice({\n  name: 'ingreddients',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillIngredients: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [fetchIngredientsAsync.fulfilled]: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchIngredientsAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [fetchIngredientsAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/pizza-configurator-page/state-ingredients/ingredientsReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","ingredients","id","name","slug","price","category","image","thumbnail","error","isLoading","fetchIngredientsAsync","_","thunkAPI","dispatch","ingredientsReducer","actions","startFetching","response","availableIngredients","status","results","json","resultsWithCorrectTypes","map","item","Number","fillIngredients","setFetchingError","stopFetching","reducers","state","action","payload","extraReducers","fulfilled","rejected","pending"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  ingredients: [\n    {\n      id: '0',\n      name: '30',\n      slug: '30',\n      price: 200,\n      category: 'size',\n      image: '',\n      thumbnail: '',\n    },\n    {\n      id: '1',\n      name: 'Тонкое',\n      slug: 'thin',\n      price: 0,\n      category: 'dough',\n      image: '',\n      thumbnail: '',\n    },\n    {\n      category: 'sauce',\n      id: '2',\n      image: '',\n      name: 'Томатный',\n      price: 0,\n      slug: 'tomato-sauce',\n      thumbnail: '',\n    },\n  ],\n  error: null,\n  isLoading: false,\n};\n\nexport const fetchIngredientsAsync = createAsyncThunk(\n  'ingredients/ingredientsFetchAsync',\n  async (_, thunkAPI) => {\n    thunkAPI.dispatch(ingredientsReducer.actions.startFetching);\n    const response = await api.ingredients.availableIngredients();\n\n    if (response.status === 200) {\n      const results = await response.json();\n\n      const resultsWithCorrectTypes = results.map(item => ({\n        ...item,\n        price: Number(item.price),\n      }));\n\n      thunkAPI.dispatch(\n        ingredientsReducer.actions.fillIngredients(resultsWithCorrectTypes)\n      );\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(ingredientsReducer.actions.setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(ingredientsReducer.actions.stopFetching());\n  }\n);\n\nexport const ingredientsReducer = createSlice({\n  name: 'ingreddients',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillIngredients: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [fetchIngredientsAsync.fulfilled]: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchIngredientsAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [fetchIngredientsAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}