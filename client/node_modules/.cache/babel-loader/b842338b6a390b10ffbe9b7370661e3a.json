{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  login: {\n    password: '',\n    email: ''\n  },\n  error: null,\n  isUserRegistered: null,\n  isLoading: false\n};\n/**\n * Action User check registation\n * @param login -> password, email\n */\n\nexport const userSingupAsync = createAsyncThunk('signup/signupFetchAsync', async (login, thunkAPI) => {\n  thunkAPI.dispatch(signupReducer.actions.startFetching());\n  const response = await api.users.create(login);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(signupReducer.actions.setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(signupReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(signupReducer.actions.stopFetching());\n});\nexport const signupReducer = createSlice({\n  name: 'signup',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isUserRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [userSingupAsync.fulfilled]: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [userSingupAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [userSingupAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/signup-page/state/signupReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","login","password","email","error","isUserRegistered","isLoading","userSingupAsync","thunkAPI","dispatch","signupReducer","actions","startFetching","response","users","create","status","results","json","setUserStatus","setFetchingError","stopFetching","name","reducers","state","action","payload","fillUserData","extraReducers","fulfilled","rejected","pending"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  login: { password: '', email: '' },\n  error: null,\n  isUserRegistered: null,\n  isLoading: false,\n};\n\n/**\n * Action User check registation\n * @param login -> password, email\n */\nexport const userSingupAsync = createAsyncThunk(\n  'signup/signupFetchAsync',\n  async (login, thunkAPI) => {\n    thunkAPI.dispatch(signupReducer.actions.startFetching());\n    const response = await api.users.create(login);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(signupReducer.actions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(signupReducer.actions.setFetchingError(error));\n    }\n    thunkAPI.dispatch(signupReducer.actions.stopFetching());\n  }\n);\n\nexport const signupReducer = createSlice({\n  name: 'signup',\n  initialState,\n  reducers: {\n\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isUserRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [userSingupAsync.fulfilled]: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [userSingupAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [userSingupAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}