{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null\n};\nexport const fetchOrdersListAsync = createAsyncThunk('orders/fetchOrdersListAsync', async (_, thunkAPI) => {\n  const response = await api.orders.getAllOrders();\n\n  if (response.status === 200) {\n    const {\n      orders\n    } = await response.json();\n    console.log('results>>>>', results);\n    thunkAPI.dispatch(ordersListReducer.actions.fillOrders(results));\n    return results;\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(ordersListReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(ordersListReducer.actions.stopFetching());\n});\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/state/ordersListReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","orders","isLoading","error","fetchOrdersListAsync","_","thunkAPI","response","getAllOrders","status","json","console","log","results","dispatch","ordersListReducer","actions","fillOrders","setFetchingError","stopFetching","name","reducers","state","action","payload","ordersFill","extraReducers","fulfilled","order","rejected","pending"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,oBAAoB,GAAGP,gBAAgB,CAClD,6BADkD,EAElD,OAAOQ,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACE,MAAJ,CAAWO,YAAX,EAAvB;;AACA,MAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM;AAAER,MAAAA;AAAF,QAAa,MAAMM,QAAQ,CAACG,IAAT,EAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,OAA3B;AAEAP,IAAAA,QAAQ,CAACQ,QAAT,CAAkBC,iBAAiB,CAACC,OAAlB,CAA0BC,UAA1B,CAAqCJ,OAArC,CAAlB;AAEA,WAAOA,OAAP;AACD,GAPD,MAOO;AACL,UAAMV,KAAK,GAAG;AACZM,MAAAA,MAAM,EAAEF,QAAQ,CAACE;AADL,KAAd;AAIAH,IAAAA,QAAQ,CAACQ,QAAT,CAAkBC,iBAAiB,CAACC,OAAlB,CAA0BE,gBAA1B,CAA2Cf,KAA3C,CAAlB;AACD;;AAEDG,EAAAA,QAAQ,CAACQ,QAAT,CAAkBC,iBAAiB,CAACC,OAAlB,CAA0BG,YAA1B,EAAlB;AACD,CApBiD,CAA7C;AAuBP,OAAO,MAAMJ,iBAAiB,GAAGjB,WAAW,CAAC;AAC3CsB,EAAAA,IAAI,EAAE,YADqC;AAE3CpB,EAAAA,YAF2C;AAG3CqB,EAAAA,QAAQ,EAAE;AACRF,IAAAA,YAAY,EAAEG,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACD,KAHO;AAIRgB,IAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACnB,KAAN,GAAcoB,MAAM,CAACC,OAArB;AACD,KAPO;AAQRC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACrB,MAAN,GAAesB,MAAM,CAACC,OAAtB;AACAF,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACnB,KAAN,GAAc,IAAd;AACD;AAZO,GAHiC;AAiB3CuB,EAAAA,aAAa,EAAE;AACb,KAACtB,oBAAoB,CAACuB,SAAtB,GAAkC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACM,KAAN,GAAcL,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACnB,KAAN,GAAc,IAAd;AACD,KALY;AAMb,KAACC,oBAAoB,CAACyB,QAAtB,GAAiC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACnB,KAAN,GAAc;AACZM,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAXY;AAYb,KAACL,oBAAoB,CAAC0B,OAAtB,GAAgCR,KAAK,IAAI;AACvCA,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACD;AAdY;AAjB4B,CAAD,CAArC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n};\n\nexport const fetchOrdersListAsync = createAsyncThunk(\n  'orders/fetchOrdersListAsync',\n  async (_, thunkAPI) => {\n    const response = await api.orders.getAllOrders();\n    if (response.status === 200) {\n      const { orders } = await response.json();\n      console.log('results>>>>', results);\n\n      thunkAPI.dispatch(ordersListReducer.actions.fillOrders(results));\n\n      return results;\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      thunkAPI.dispatch(ordersListReducer.actions.setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(ordersListReducer.actions.stopFetching());\n  }\n);\n\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}