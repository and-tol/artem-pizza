{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nexport const loginActions = Object.freeze({\n  startFetching: () => {\n    return {\n      type: actionTypes.LOGIN_START_FETCHING\n    };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.LOGIN_STOP_FETCHING\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: actionTypes.LOGIN_SET_FETCHING_ERROR,\n      payload: error\n    };\n  },\n  setUserStatus: status => {\n    return {\n      type: actionTypes.LOGIN_SET_STATUS,\n      payload: status\n    };\n  },\n  fillUserData: payload => {\n    return {\n      type: actionTypes.LOGIN_FILL,\n      payload\n    };\n  },\n\n  /**\n   * Checking user registration\n   * @param credentials -> password, email\n   */\n  checkUserAsync: credentials => async dispatch => {\n    dispatch(loginActions.startFetching());\n    const response = await api.users.login(credentials);\n\n    if (response.status === 200) {\n      const results = await response.json();\n      dispatch(loginActions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status\n      };\n      dispatch(loginActions.setFetchingError(error));\n    }\n\n    dispatch(loginActions.stopFetching());\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/login-page/state/loginActions.js"],"names":["createAction","createAsyncThunk","api","loginActions","Object","freeze","startFetching","type","actionTypes","LOGIN_START_FETCHING","stopFetching","LOGIN_STOP_FETCHING","setFetchingError","error","LOGIN_SET_FETCHING_ERROR","payload","setUserStatus","status","LOGIN_SET_STATUS","fillUserData","LOGIN_FILL","checkUserAsync","credentials","dispatch","response","users","login","results","json"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAIA,OAAO,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc;AACxCC,EAAAA,aAAa,EAAE,MAAM;AACnB,WAAO;AAAEC,MAAAA,IAAI,EAAEC,WAAW,CAACC;AAApB,KAAP;AACD,GAHuC;AAIxCC,EAAAA,YAAY,EAAE,MAAM;AAClB,WAAO;AACLH,MAAAA,IAAI,EAAEC,WAAW,CAACG;AADb,KAAP;AAGD,GARuC;AASxCC,EAAAA,gBAAgB,EAAEC,KAAK,IAAI;AACzB,WAAO;AACLN,MAAAA,IAAI,EAAEC,WAAW,CAACM,wBADb;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAduC;AAgBxCG,EAAAA,aAAa,EAAEC,MAAM,IAAI;AACvB,WAAO;AACLV,MAAAA,IAAI,EAAEC,WAAW,CAACU,gBADb;AAELH,MAAAA,OAAO,EAAEE;AAFJ,KAAP;AAID,GArBuC;AAuBxCE,EAAAA,YAAY,EAAEJ,OAAO,IAAI;AACvB,WAAO;AACLR,MAAAA,IAAI,EAAEC,WAAW,CAACY,UADb;AAELL,MAAAA;AAFK,KAAP;AAID,GA5BuC;;AA8BxC;AACF;AACA;AACA;AACEM,EAAAA,cAAc,EAAEC,WAAW,IAAI,MAAMC,QAAN,IAAkB;AAC/CA,IAAAA,QAAQ,CAACpB,YAAY,CAACG,aAAb,EAAD,CAAR;AAEA,UAAMkB,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,KAAJ,CAAUC,KAAV,CAAgBJ,WAAhB,CAAvB;;AACA,QAAIE,QAAQ,CAACP,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMU,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AAEAL,MAAAA,QAAQ,CAACpB,YAAY,CAACa,aAAb,CAA2BW,OAA3B,CAAD,CAAR;AACD,KAJD,MAIO;AACL,YAAMd,KAAK,GAAG;AACZI,QAAAA,MAAM,EAAEO,QAAQ,CAACP;AADL,OAAd;AAGAM,MAAAA,QAAQ,CAACpB,YAAY,CAACS,gBAAb,CAA8BC,KAA9B,CAAD,CAAR;AACD;;AACDU,IAAAA,QAAQ,CAACpB,YAAY,CAACO,YAAb,EAAD,CAAR;AACD;AAjDuC,CAAd,CAArB","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\n\n\nexport const loginActions = Object.freeze({\n  startFetching: () => {\n    return { type: actionTypes.LOGIN_START_FETCHING };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.LOGIN_STOP_FETCHING,\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: actionTypes.LOGIN_SET_FETCHING_ERROR,\n      payload: error,\n    };\n  },\n\n  setUserStatus: status => {\n    return {\n      type: actionTypes.LOGIN_SET_STATUS,\n      payload: status,\n    };\n  },\n\n  fillUserData: payload => {\n    return {\n      type: actionTypes.LOGIN_FILL,\n      payload,\n    };\n  },\n\n  /**\n   * Checking user registration\n   * @param credentials -> password, email\n   */\n  checkUserAsync: credentials => async dispatch => {\n    dispatch(loginActions.startFetching());\n\n    const response = await api.users.login(credentials);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      dispatch(loginActions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      dispatch(loginActions.setFetchingError(error));\n    }\n    dispatch(loginActions.stopFetching());\n  },\n});\n"]},"metadata":{},"sourceType":"module"}