{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit'; // ActionTypes\n\nimport { ordersListActionTypes } from './ordersListActionTypes'; // Api\n\nimport { api } from '../../../api';\nexport const stopFetching = createAction(ordersListActionTypes.ORDERS_STOP_FETCHING);\nexport const setFetchingError = createAction(ordersListActionTypes.ORDERS_SET_FETCHING_ERROR);\nexport const fillOrders = createAction(ordersListActionTypes.ORDERS_FILL); // Async\n\nexport const fetchOrdersAsync = createAsyncThunk(ordersListActionTypes.ORDERS_FETCH_ASYNC, async (_, thunkAPI) => {\n  const response = await api.orders.getAllOrders();\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(fillOrders(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/state/ordersListActions.js"],"names":["createAction","createAsyncThunk","ordersListActionTypes","api","stopFetching","ORDERS_STOP_FETCHING","setFetchingError","ORDERS_SET_FETCHING_ERROR","fillOrders","ORDERS_FILL","fetchOrdersAsync","ORDERS_FETCH_ASYNC","_","thunkAPI","response","orders","getAllOrders","status","results","json","dispatch","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C,C,CACA;;AACA,SAASC,qBAAT,QAAsC,yBAAtC,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAO,MAAMC,YAAY,GAAGJ,YAAY,CACtCE,qBAAqB,CAACG,oBADgB,CAAjC;AAIP,OAAO,MAAMC,gBAAgB,GAAGN,YAAY,CAC1CE,qBAAqB,CAACK,yBADoB,CAArC;AAIP,OAAO,MAAMC,UAAU,GAAGR,YAAY,CAACE,qBAAqB,CAACO,WAAvB,CAA/B,C,CAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAGT,gBAAgB,CAC9CC,qBAAqB,CAACS,kBADwB,EAE9C,OAAOC,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,MAAJ,CAAWC,YAAX,EAAvB;;AAEA,MAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEAN,IAAAA,QAAQ,CAACO,QAAT,CAAkBZ,UAAU,CAACU,OAAD,CAA5B;AACD,GAJD,MAIO;AACL,UAAMG,KAAK,GAAG;AACZJ,MAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,KAAd;AAIAJ,IAAAA,QAAQ,CAACO,QAAT,CAAkBd,gBAAgB,CAACe,KAAD,CAAlC;AACD;;AAEDR,EAAAA,QAAQ,CAACO,QAAT,CAAkBhB,YAAY,EAA9B;AACD,CAlB6C,CAAzC","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\n// ActionTypes\nimport { ordersListActionTypes } from './ordersListActionTypes';\n// Api\nimport { api } from '../../../api';\n\nexport const stopFetching = createAction(\n  ordersListActionTypes.ORDERS_STOP_FETCHING\n);\n\nexport const setFetchingError = createAction(\n  ordersListActionTypes.ORDERS_SET_FETCHING_ERROR\n);\n\nexport const fillOrders = createAction(ordersListActionTypes.ORDERS_FILL);\n\n// Async\nexport const fetchOrdersAsync = createAsyncThunk(\n  ordersListActionTypes.ORDERS_FETCH_ASYNC,\n  async (_, thunkAPI) => {\n    const response = await api.orders.getAllOrders();\n\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(fillOrders(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n"]},"metadata":{},"sourceType":"module"}