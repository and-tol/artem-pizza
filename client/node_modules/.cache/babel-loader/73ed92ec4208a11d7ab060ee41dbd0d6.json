{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api'; // ActionTypes\n\nimport { checkoutActionTypes } from './checkoutActionTypes';\nexport const startFetching = createAction('CHECKOUT_START_FETCHING');\nexport const stopFetching = createAction('CHECKOUT_STOP_FETCHING');\nexport const setFetchingError = createAction('CHECKOUT_SET_FETCHING_ERROR');\nexport const checkoutActions = Object.freeze({\n  startFetching: () => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_START_FETCHING\n    };\n  },\n  stopFetching: () => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_STOP_FETCHING\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_SET_FETCHING_ERROR,\n      payload: error\n    };\n  },\n  fillOrder: payload => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_FILL,\n      payload\n    };\n  },\n  setAccept: payload => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_SET_ACCEPT,\n      payload\n    };\n  },\n  // Async\n  sendOrderAsync: data => async dispatch => {\n    dispatch(checkoutActions.startFetching());\n    const response = await api.orders.createOrder(data);\n\n    if (response.status === 200) {\n      const {\n        message\n      } = await response.json();\n      dispatch(checkoutActions.setAccept(message));\n    } else {\n      const error = {\n        status: response.status\n      };\n      dispatch(checkoutActions.setFetchingError(error));\n    }\n\n    dispatch(checkoutActions.stopFetching());\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/checkout-page/state/checkoutActions.js"],"names":["createAction","api","checkoutActionTypes","startFetching","stopFetching","setFetchingError","checkoutActions","Object","freeze","type","CHECKOUT_START_FETCHING","CHECKOUT_STOP_FETCHING","error","CHECKOUT_SET_FETCHING_ERROR","payload","fillOrder","CHECKOUT_FILL","setAccept","CHECKOUT_SET_ACCEPT","sendOrderAsync","data","dispatch","response","orders","createOrder","status","message","json"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,kBAA3B,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB,C,CACA;;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,MAAMC,aAAa,GAAGH,YAAY,CAAC,yBAAD,CAAlC;AACP,OAAO,MAAMI,YAAY,GAAGJ,YAAY,CAAC,wBAAD,CAAjC;AACP,OAAO,MAAMK,gBAAgB,GAAGL,YAAY,CAAC,6BAAD,CAArC;AAEP,OAAO,MAAMM,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC3CL,EAAAA,aAAa,EAAE,MAAM;AACnB,WAAO;AAAEM,MAAAA,IAAI,EAAEP,mBAAmB,CAACQ;AAA5B,KAAP;AACD,GAH0C;AAI3CN,EAAAA,YAAY,EAAE,MAAM;AAClB,WAAO;AACLK,MAAAA,IAAI,EAAEP,mBAAmB,CAACS;AADrB,KAAP;AAGD,GAR0C;AAS3CN,EAAAA,gBAAgB,EAAEO,KAAK,IAAI;AACzB,WAAO;AACLH,MAAAA,IAAI,EAAEP,mBAAmB,CAACW,2BADrB;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAd0C;AAgB3CG,EAAAA,SAAS,EAAED,OAAO,IAAI;AACpB,WAAO;AACLL,MAAAA,IAAI,EAAEP,mBAAmB,CAACc,aADrB;AAELF,MAAAA;AAFK,KAAP;AAID,GArB0C;AAsB3CG,EAAAA,SAAS,EAAEH,OAAO,IAAI;AACpB,WAAO;AACLL,MAAAA,IAAI,EAAEP,mBAAmB,CAACgB,mBADrB;AAELJ,MAAAA;AAFK,KAAP;AAID,GA3B0C;AA6B3C;AACAK,EAAAA,cAAc,EAAEC,IAAI,IAAI,MAAMC,QAAN,IAAkB;AACxCA,IAAAA,QAAQ,CAACf,eAAe,CAACH,aAAhB,EAAD,CAAR;AAEA,UAAMmB,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,MAAJ,CAAWC,WAAX,CAAuBJ,IAAvB,CAAvB;;AACA,QAAIE,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAMJ,QAAQ,CAACK,IAAT,EAA1B;AAEAN,MAAAA,QAAQ,CAACf,eAAe,CAACW,SAAhB,CAA0BS,OAA1B,CAAD,CAAR;AACD,KAJD,MAIO;AACL,YAAMd,KAAK,GAAG;AACZa,QAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,OAAd;AAGAJ,MAAAA,QAAQ,CAACf,eAAe,CAACD,gBAAhB,CAAiCO,KAAjC,CAAD,CAAR;AACD;;AACDS,IAAAA,QAAQ,CAACf,eAAe,CAACF,YAAhB,EAAD,CAAR;AACD;AA7C0C,CAAd,CAAxB","sourcesContent":["import {createAction} from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n// ActionTypes\nimport { checkoutActionTypes } from './checkoutActionTypes';\n\nexport const startFetching = createAction('CHECKOUT_START_FETCHING');\nexport const stopFetching = createAction('CHECKOUT_STOP_FETCHING')\nexport const setFetchingError = createAction('CHECKOUT_SET_FETCHING_ERROR');\n\nexport const checkoutActions = Object.freeze({\n  startFetching: () => {\n    return { type: checkoutActionTypes.CHECKOUT_START_FETCHING };\n  },\n  stopFetching: () => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_STOP_FETCHING,\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_SET_FETCHING_ERROR,\n      payload: error,\n    };\n  },\n\n  fillOrder: payload => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_FILL,\n      payload,\n    };\n  },\n  setAccept: payload => {\n    return {\n      type: checkoutActionTypes.CHECKOUT_SET_ACCEPT,\n      payload,\n    };\n  },\n\n  // Async\n  sendOrderAsync: data => async dispatch => {\n    dispatch(checkoutActions.startFetching());\n\n    const response = await api.orders.createOrder(data);\n    if (response.status === 200) {\n      const { message } = await response.json();\n\n      dispatch(checkoutActions.setAccept(message));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      dispatch(checkoutActions.setFetchingError(error));\n    }\n    dispatch(checkoutActions.stopFetching());\n  },\n});\n"]},"metadata":{},"sourceType":"module"}