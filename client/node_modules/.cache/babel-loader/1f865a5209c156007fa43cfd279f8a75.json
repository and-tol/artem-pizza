{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api'; // ActionTypes\n\nimport { loginActionTypes } from './loginActionTypes';\nexport const stopFetching = createAction(loginActionTypes.LOGIN_STOP_FETCHING);\nexport const setFetchingError = createAction(loginActionTypes.LOGIN_SET_FETCHING_ERROR);\nexport const setUserStatus = createAction(loginActionTypes.LOGIN_SET_STATUS);\nexport const fillUserData = createAction(loginActionTypes.LOGIN_SET_STATUS);\n/**\n * Checking user registration\n * @param credentials -> password, email\n */\n\nexport const checkUserAsync = createAsyncThunk(loginActionTypes.LOGIN_FETCH_ASYNC, async (credentials, thunkAPI) => {\n  const response = await api.users.login(credentials);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(setUserStatus(results));\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(stopFetching());\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/login-page/state/loginActions.js"],"names":["createAction","createAsyncThunk","api","loginActionTypes","stopFetching","LOGIN_STOP_FETCHING","setFetchingError","LOGIN_SET_FETCHING_ERROR","setUserStatus","LOGIN_SET_STATUS","fillUserData","checkUserAsync","LOGIN_FETCH_ASYNC","credentials","thunkAPI","response","users","login","status","results","json","dispatch","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB,C,CACA;;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAO,MAAMC,YAAY,GAAGJ,YAAY,CAACG,gBAAgB,CAACE,mBAAlB,CAAjC;AAEP,OAAO,MAAMC,gBAAgB,GAAGN,YAAY,CAC1CG,gBAAgB,CAACI,wBADyB,CAArC;AAIP,OAAO,MAAMC,aAAa,GAAGR,YAAY,CAACG,gBAAgB,CAACM,gBAAlB,CAAlC;AAEP,OAAO,MAAMC,YAAY,GAAGV,YAAY,CAACG,gBAAgB,CAACM,gBAAlB,CAAjC;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAME,cAAc,GAAGV,gBAAgB,CAC5CE,gBAAgB,CAACS,iBAD2B,EAE5C,OAAOC,WAAP,EAAoBC,QAApB,KAAiC;AAC/B,QAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,KAAJ,CAAUC,KAAV,CAAgBJ,WAAhB,CAAvB;;AACA,MAAIE,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEAN,IAAAA,QAAQ,CAACO,QAAT,CAAkBb,aAAa,CAACW,OAAD,CAA/B;AACD,GAJD,MAIO;AACL,UAAMG,KAAK,GAAG;AACZJ,MAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,KAAd;AAGAJ,IAAAA,QAAQ,CAACO,QAAT,CAAkBf,gBAAgB,CAACgB,KAAD,CAAlC;AACD;;AACDR,EAAAA,QAAQ,CAACO,QAAT,CAAkBjB,YAAY,EAA9B;AACD,CAf2C,CAAvC","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n// ActionTypes\nimport { loginActionTypes } from './loginActionTypes';\n\nexport const stopFetching = createAction(loginActionTypes.LOGIN_STOP_FETCHING);\n\nexport const setFetchingError = createAction(\n  loginActionTypes.LOGIN_SET_FETCHING_ERROR\n);\n\nexport const setUserStatus = createAction(loginActionTypes.LOGIN_SET_STATUS);\n\nexport const fillUserData = createAction(loginActionTypes.LOGIN_SET_STATUS);\n\n/**\n * Checking user registration\n * @param credentials -> password, email\n */\nexport const checkUserAsync = createAsyncThunk(\n  loginActionTypes.LOGIN_FETCH_ASYNC,\n  async (credentials, thunkAPI) => {\n    const response = await api.users.login(credentials);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(setFetchingError(error));\n    }\n    thunkAPI.dispatch(stopFetching());\n  }\n);\n"]},"metadata":{},"sourceType":"module"}