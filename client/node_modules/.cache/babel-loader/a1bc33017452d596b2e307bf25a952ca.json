{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\artem-pizza\\\\client\\\\src\\\\pages\\\\orders-list-page\\\\OrdersListPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types'; // Actions\n\nimport { fetchOrdersListAsync } from './state/ordersListReducer';\nimport { fetchIngredientsAsync } from '../pizza-configurator-page/state-ingredients/ingredientsReducer';\nimport { checkoutReducer, sendOrderAsync } from '../checkout-page/state/checkoutReducer'; // Selectors\n\nimport { getOrders, getLoadingStatus } from './state/ordersListSelectors'; // Components\n\nimport { Loader } from '../../share/components';\nimport { Order } from '../../share/components';\nexport const OrdersListPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    dispatch(fetchIngredientsAsync());\n    dispatch(fetchOrdersListAsync());\n  }, [dispatch]);\n  const orders = useSelector(getOrders);\n  const isLoading = useSelector(getLoadingStatus);\n  /**\n   * Устанавливает время изменения иконки у последненго заказа\n   * Sets the change time for the icon for the last order\n   */\n\n  const [isInterval, setIsInterval] = useState(true);\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setIsInterval(false);\n    }, 3600000);\n    return () => clearTimeout(id);\n  }, []);\n\n  const repeatPizzaOrder = orderNumber => {\n    if (orders[orderNumber]) {\n      dispatch(checkoutReducer.actions.fillOrder(orders[orderNumber]));\n      dispatch(sendOrderAsync(orders[orderNumber]));\n      history.push('/order-confirm');\n    }\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: orders.length ? orders.map((order, i) => /*#__PURE__*/_jsxDEV(Order, {\n      order: order,\n      pizza: order.pizza,\n      sequence: i,\n      isInterval: isInterval,\n      repeatPizzaOrder: repeatPizzaOrder\n    }, order.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u0412\\u044B \\u043F\\u043E\\u043A\\u0430 \\u043D\\u0435 \\u0441\\u0434\\u0435\\u043B\\u0430\\u043B\\u0438 \\u043D\\u0438 \\u043E\\u0434\\u043D\\u043E\\u0433\\u043E \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(OrdersListPage, \"D/kLUurGK5Agq8SG6VMk85eAQo8=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = OrdersListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersListPage\");","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/OrdersListPage.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","PropTypes","fetchOrdersListAsync","fetchIngredientsAsync","checkoutReducer","sendOrderAsync","getOrders","getLoadingStatus","Loader","Order","OrdersListPage","dispatch","history","orders","isLoading","isInterval","setIsInterval","id","setTimeout","clearTimeout","repeatPizzaOrder","orderNumber","actions","fillOrder","push","length","map","order","i","pizza"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,qBAAT,QAAsC,iEAAtC;AACA,SACEC,eADF,EAEEC,cAFF,QAGO,wCAHP,C,CAIA;;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,6BAA5C,C,CACA;;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,OAAO,GAAGZ,UAAU,EAA1B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAQ,IAAAA,QAAQ,CAACT,oBAAoB,EAArB,CAAR;AACD,GAHQ,EAGN,CAACS,QAAD,CAHM,CAAT;AAKA,QAAME,MAAM,GAAGd,WAAW,CAACO,SAAD,CAA1B;AACA,QAAMQ,SAAS,GAAGf,WAAW,CAACQ,gBAAD,CAA7B;AAEA;AACF;AACA;AACA;;AACE,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,IAAD,CAA5C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,EAAE,GAAGC,UAAU,CAAC,MAAM;AAC1BF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAFoB,EAElB,OAFkB,CAArB;AAGA,WAAO,MAAMG,YAAY,CAACF,EAAD,CAAzB;AACD,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMG,gBAAgB,GAAGC,WAAW,IAAI;AACtC,QAAIR,MAAM,CAACQ,WAAD,CAAV,EAAyB;AACvBV,MAAAA,QAAQ,CAACP,eAAe,CAACkB,OAAhB,CAAwBC,SAAxB,CAAkCV,MAAM,CAACQ,WAAD,CAAxC,CAAD,CAAR;AACAV,MAAAA,QAAQ,CAACN,cAAc,CAACQ,MAAM,CAACQ,WAAD,CAAP,CAAf,CAAR;AAEAT,MAAAA,OAAO,CAACY,IAAR,CAAa,gBAAb;AACD;AACF,GAPD;;AASA,MAAIV,SAAJ,EAAe;AACb,wBACE;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAA,cACGD,MAAM,CAACY,MAAP,GACCZ,MAAM,CAACa,GAAP,CAAW,CAACC,KAAD,EAAQC,CAAR,kBACT,QAAC,KAAD;AAEE,MAAA,KAAK,EAAED,KAFT;AAGE,MAAA,KAAK,EAAEA,KAAK,CAACE,KAHf;AAIE,MAAA,QAAQ,EAAED,CAJZ;AAKE,MAAA,UAAU,EAAEb,UALd;AAME,MAAA,gBAAgB,EAAEK;AANpB,OACOO,KAAK,CAACV,EADb;AAAA;AAAA;AAAA;AAAA,YADF,CADD,gBAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbJ,mBADF;AAkBD,CA3DM;;GAAMP,c;UACMZ,W,EACDE,U,EAODD,W,EACGA,W;;;KAVPW,c","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types'\n// Actions\nimport { fetchOrdersListAsync } from './state/ordersListReducer';\nimport { fetchIngredientsAsync } from '../pizza-configurator-page/state-ingredients/ingredientsReducer';\nimport {\n  checkoutReducer,\n  sendOrderAsync,\n} from '../checkout-page/state/checkoutReducer';\n// Selectors\nimport { getOrders, getLoadingStatus } from './state/ordersListSelectors';\n// Components\nimport { Loader } from '../../share/components';\nimport { Order } from '../../share/components';\n\nexport const OrdersListPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(fetchIngredientsAsync());\n    dispatch(fetchOrdersListAsync());\n  }, [dispatch]);\n\n  const orders = useSelector(getOrders);\n  const isLoading = useSelector(getLoadingStatus);\n\n  /**\n   * Устанавливает время изменения иконки у последненго заказа\n   * Sets the change time for the icon for the last order\n   */\n  const [isInterval, setIsInterval] = useState(true);\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setIsInterval(false);\n    }, 3600000);\n    return () => clearTimeout(id);\n  }, []);\n\n  const repeatPizzaOrder = orderNumber => {\n    if (orders[orderNumber]) {\n      dispatch(checkoutReducer.actions.fillOrder(orders[orderNumber]));\n      dispatch(sendOrderAsync(orders[orderNumber]));\n\n      history.push('/order-confirm');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div>\n        <Loader />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {orders.length ? (\n        orders.map((order, i) => (\n          <Order\n            key={order.id}\n            order={order}\n            pizza={order.pizza}\n            sequence={i}\n            isInterval={isInterval}\n            repeatPizzaOrder={repeatPizzaOrder}\n          />\n        ))\n      ) : (\n        <span>Вы пока не сделали ни одного заказа</span>\n      )}\n    </>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}