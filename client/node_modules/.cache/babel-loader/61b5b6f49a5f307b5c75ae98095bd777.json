{"ast":null,"code":"import { createReducer, createSlice } from '@reduxjs/toolkit'; // Action Types\n\nimport { ingredientsActionTypes } from './ingredientsActionTypes';\nconst initialState = {\n  ingredients: [{\n    id: '0',\n    name: '30',\n    slug: '30',\n    price: 200,\n    category: 'size',\n    image: '',\n    thumbnail: ''\n  }, {\n    category: 'dough',\n    id: '1',\n    image: '',\n    name: 'Тонкое',\n    price: 0,\n    slug: 'thin',\n    thumbnail: ''\n  }, {\n    category: 'sauce',\n    id: '2',\n    image: '',\n    name: 'Томатный',\n    price: 0,\n    slug: 'tomato-sauce',\n    thumbnail: ''\n  }],\n  error: null,\n  isLoading: false\n};\nexport const ingredientsReducer = createSlice({\n  name: 'ingreddients',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillIngredients: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/pizza-configurator-page/state-ingredients/ingredientsReducer.js"],"names":["createReducer","createSlice","ingredientsActionTypes","initialState","ingredients","id","name","slug","price","category","image","thumbnail","error","isLoading","ingredientsReducer","reducers","startFetching","state","stopFetching","setFetchingError","action","payload","fillIngredients"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,kBAA3C,C,CAEA;;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,CACX;AACEC,IAAAA,EAAE,EAAE,GADN;AAEEC,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,KAAK,EAAE,GAJT;AAKEC,IAAAA,QAAQ,EAAE,MALZ;AAMEC,IAAAA,KAAK,EAAE,EANT;AAOEC,IAAAA,SAAS,EAAE;AAPb,GADW,EAUX;AACEF,IAAAA,QAAQ,EAAE,OADZ;AAEEJ,IAAAA,EAAE,EAAE,GAFN;AAGEK,IAAAA,KAAK,EAAE,EAHT;AAIEJ,IAAAA,IAAI,EAAE,QAJR;AAKEE,IAAAA,KAAK,EAAE,CALT;AAMED,IAAAA,IAAI,EAAE,MANR;AAOEI,IAAAA,SAAS,EAAE;AAPb,GAVW,EAmBX;AACEF,IAAAA,QAAQ,EAAE,OADZ;AAEEJ,IAAAA,EAAE,EAAE,GAFN;AAGEK,IAAAA,KAAK,EAAE,EAHT;AAIEJ,IAAAA,IAAI,EAAE,UAJR;AAKEE,IAAAA,KAAK,EAAE,CALT;AAMED,IAAAA,IAAI,EAAE,cANR;AAOEI,IAAAA,SAAS,EAAE;AAPb,GAnBW,CADM;AA8BnBC,EAAAA,KAAK,EAAE,IA9BY;AA+BnBC,EAAAA,SAAS,EAAE;AA/BQ,CAArB;AAoCA,OAAO,MAAMC,kBAAkB,GAAGb,WAAW,CAAC;AAC5CK,EAAAA,IAAI,EAAE,cADsC;AAE5CH,EAAAA,YAF4C;AAG5CY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAEC,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRK,IAAAA,YAAY,EAAED,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB;AACD,KANO;AAORM,IAAAA,gBAAgB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACnCH,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACD,KAVO;AAWRC,IAAAA,eAAe,EAAE,CAACL,KAAD,EAAQG,MAAR,KAAmB;AAClCH,MAAAA,KAAK,CAACb,WAAN,GAAoBgB,MAAM,CAACC,OAA3B;AACAJ,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD;AAfO;AAHkC,CAAD,CAAtC","sourcesContent":["import { createReducer, createSlice } from '@reduxjs/toolkit';\n\n// Action Types\nimport { ingredientsActionTypes } from './ingredientsActionTypes';\n\nconst initialState = {\n  ingredients: [\n    {\n      id: '0',\n      name: '30',\n      slug: '30',\n      price: 200,\n      category: 'size',\n      image: '',\n      thumbnail: '',\n    },\n    {\n      category: 'dough',\n      id: '1',\n      image: '',\n      name: 'Тонкое',\n      price: 0,\n      slug: 'thin',\n      thumbnail: '',\n    },\n    {\n      category: 'sauce',\n      id: '2',\n      image: '',\n      name: 'Томатный',\n      price: 0,\n      slug: 'tomato-sauce',\n      thumbnail: '',\n    },\n  ],\n  error: null,\n  isLoading: false,\n};\n\n\n\nexport const ingredientsReducer = createSlice({\n  name: 'ingreddients',\n  initialState,\n  reducers: {\n    startFetching: state => {\n      state.isLoading = true;\n    },\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillIngredients: (state, action) => {\n      state.ingredients = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}