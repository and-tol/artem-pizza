{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nfunction getWindowDimensions(hasWindow) {\n  const width = hasWindow ? window.innerWidth : null;\n  const height = hasWindow ? window.innerHeight : null;\n  return {\n    width,\n    height\n  };\n}\n\nexport const useWindowDimensions = () => {\n  _s();\n\n  const hasWindow = typeof window !== 'undefined';\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions(hasWindow));\n  useEffect(() => {\n    if (hasWindow) {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [hasWindow]);\n  return windowDimensions;\n};\n\n_s(useWindowDimensions, \"q8at2f/T2GppfymisbUj2ObspZw=\");","map":{"version":3,"sources":["F:/artem-pizza/client/src/share/hooks/useWindowDimentions.js"],"names":["useState","useEffect","getWindowDimensions","hasWindow","width","window","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AACtC,QAAMC,KAAK,GAAGD,SAAS,GAAGE,MAAM,CAACC,UAAV,GAAuB,IAA9C;AACA,QAAMC,MAAM,GAAGJ,SAAS,GAAGE,MAAM,CAACG,WAAV,GAAwB,IAAhD;AACA,SAAO;AACLJ,IAAAA,KADK;AAELG,IAAAA;AAFK,GAAP;AAID;;AACD,OAAO,MAAME,mBAAmB,GAAG,MAAM;AAAA;;AACvC,QAAMN,SAAS,GAAG,OAAOE,MAAP,KAAkB,WAApC;AAGA,QAAM,CAACK,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CACtDE,mBAAmB,CAACC,SAAD,CADmC,CAAxD;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,SAAJ,EAAe;AACb,eAASS,YAAT,GAAwB;AACtBD,QAAAA,mBAAmB,CAACT,mBAAmB,EAApB,CAAnB;AACD;;AAEDG,MAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,aAAO,MAAMP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD;AACF,GATQ,EASN,CAACT,SAAD,CATM,CAAT;AAWA,SAAOO,gBAAP;AACD,CApBM;;GAAMD,mB","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions(hasWindow) {\n  const width = hasWindow ? window.innerWidth : null;\n  const height = hasWindow ? window.innerHeight : null;\n  return {\n    width,\n    height,\n  };\n}\nexport const useWindowDimensions = () => {\n  const hasWindow = typeof window !== 'undefined';\n\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions(hasWindow)\n  );\n\n  useEffect(() => {\n    if (hasWindow) {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [hasWindow]);\n\n  return windowDimensions;\n};\n"]},"metadata":{},"sourceType":"module"}