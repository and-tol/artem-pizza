{"ast":null,"code":"// ActionTypes\nimport { actionTypes } from './actionTypes'; // Api\n\nimport { api } from '../../../api'; // Types\n\nexport const ingredientsActions = Object.freeze({\n  startFetching: () => {\n    return {\n      type: actionTypes.INGREDIENTS_START_FETCHING\n    };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.INGREDIENTS_STOP_FETCHING\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: actionTypes.INGREDIENTS_SET_FETCHING_ERROR,\n      payload: error\n    };\n  },\n  fillIngredients: payload => {\n    return {\n      type: actionTypes.INGREDIENTS_FILL,\n      payload\n    };\n  },\n  // Async\n  fetchIngredientsAsync: () => async dispatch => {\n    dispatch(ingredientsActions.startFetching());\n    const response = await api.ingredients.availableIngredients();\n\n    if (response.status === 200) {\n      const results = await response.json();\n      const resultsWithCorrectTypes = results.map(item => ({ ...item,\n        price: Number(item.price)\n      }));\n      dispatch(ingredientsActions.fillIngredients(resultsWithCorrectTypes));\n    } else {\n      const error = {\n        status: response.status\n      };\n      dispatch(ingredientsActions.setFetchingError(error));\n    }\n\n    dispatch(ingredientsActions.stopFetching());\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/pizza-configurator-page/state-ingredients/actions.ts"],"names":["actionTypes","api","ingredientsActions","Object","freeze","startFetching","type","INGREDIENTS_START_FETCHING","stopFetching","INGREDIENTS_STOP_FETCHING","setFetchingError","error","INGREDIENTS_SET_FETCHING_ERROR","payload","fillIngredients","INGREDIENTS_FILL","fetchIngredientsAsync","dispatch","response","ingredients","availableIngredients","status","results","json","resultsWithCorrectTypes","map","item","price","Number"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,eAA5B,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB,C,CACA;;AAGA,OAAO,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC9CC,EAAAA,aAAa,EAAE,MAAM;AACnB,WAAO;AACLC,MAAAA,IAAI,EAAEN,WAAW,CAACO;AADb,KAAP;AAGD,GAL6C;AAM9CC,EAAAA,YAAY,EAAE,MAAM;AAClB,WAAO;AACLF,MAAAA,IAAI,EAAEN,WAAW,CAACS;AADb,KAAP;AAGD,GAV6C;AAW9CC,EAAAA,gBAAgB,EAAGC,KAAD,IAA8B;AAC9C,WAAO;AACLL,MAAAA,IAAI,EAAEN,WAAW,CAACY,8BADb;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAhB6C;AAkB9CG,EAAAA,eAAe,EAAGD,OAAD,IAAgC;AAC/C,WAAO;AACLP,MAAAA,IAAI,EAAEN,WAAW,CAACe,gBADb;AAELF,MAAAA;AAFK,KAAP;AAID,GAvB6C;AAyB9C;AACAG,EAAAA,qBAAqB,EAAE,MAAM,MAAOC,QAAP,IAAyB;AACpDA,IAAAA,QAAQ,CAACf,kBAAkB,CAACG,aAAnB,EAAD,CAAR;AAEA,UAAMa,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,WAAJ,CAAgBC,oBAAhB,EAAvB;;AAEA,QAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMC,OAAoC,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnD;AAEA,YAAMC,uBAA0C,GAAGF,OAAO,CAACG,GAAR,CAAYC,IAAI,KAAK,EACtE,GAAGA,IADmE;AAEtEC,QAAAA,KAAK,EAAEC,MAAM,CAACF,IAAI,CAACC,KAAN;AAFyD,OAAL,CAAhB,CAAnD;AAKAV,MAAAA,QAAQ,CAACf,kBAAkB,CAACY,eAAnB,CAAmCU,uBAAnC,CAAD,CAAR;AACD,KATD,MASO;AACL,YAAMb,KAAK,GAAG;AACZU,QAAAA,MAAM,EAAEH,QAAQ,CAACG;AADL,OAAd;AAGAJ,MAAAA,QAAQ,CAACf,kBAAkB,CAACQ,gBAAnB,CAAoCC,KAApC,CAAD,CAAR;AACD;;AAEDM,IAAAA,QAAQ,CAACf,kBAAkB,CAACM,YAAnB,EAAD,CAAR;AACD;AAhD6C,CAAd,CAA3B","sourcesContent":["// ActionTypes\nimport { actionTypes } from './actionTypes';\n// Api\nimport { api } from '../../../api';\n// Types\nimport { ErrorState, Ingredient, IngredientFromServer } from '../../../types';\n\nexport const ingredientsActions = Object.freeze({\n  startFetching: () => {\n    return {\n      type: actionTypes.INGREDIENTS_START_FETCHING,\n    };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.INGREDIENTS_STOP_FETCHING,\n    };\n  },\n  setFetchingError: (error: ErrorState | null) => {\n    return {\n      type: actionTypes.INGREDIENTS_SET_FETCHING_ERROR,\n      payload: error,\n    };\n  },\n\n  fillIngredients: (payload: Ingredient[] | []) => {\n    return {\n      type: actionTypes.INGREDIENTS_FILL,\n      payload,\n    };\n  },\n\n  // Async\n  fetchIngredientsAsync: () => async (dispatch: any) => {\n    dispatch(ingredientsActions.startFetching());\n\n    const response = await api.ingredients.availableIngredients();\n\n    if (response.status === 200) {\n      const results: Array<IngredientFromServer> = await response.json();\n\n      const resultsWithCorrectTypes: Array<Ingredient> = results.map(item => ({\n        ...item,\n        price: Number(item.price),\n      }));\n\n      dispatch(ingredientsActions.fillIngredients(resultsWithCorrectTypes));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      dispatch(ingredientsActions.setFetchingError(error));\n    }\n\n    dispatch(ingredientsActions.stopFetching());\n  },\n});\n"]},"metadata":{},"sourceType":"module"}