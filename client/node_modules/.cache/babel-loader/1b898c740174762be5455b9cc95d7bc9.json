{"ast":null,"code":"// ActionTypes\nimport { actionTypes } from './actionTypes'; // Api\n\nimport { api } from '../../../api';\nexport const loginActions = Object.freeze({\n  startFetching: () => {\n    return {\n      type: actionTypes.LOGIN_START_FETCHING\n    };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.LOGIN_STOP_FETCHING\n    };\n  },\n  setFetchingError: error => {\n    return {\n      type: actionTypes.LOGIN_SET_FETCHING_ERROR,\n      payload: error\n    };\n  },\n  setUserStatus: status => {\n    return {\n      type: actionTypes.LOGIN_SET_STATUS,\n      payload: status\n    };\n  },\n  fillUserData: payload => {\n    return {\n      type: actionTypes.LOGIN_FILL,\n      payload\n    };\n  },\n\n  /**\n   * Checking user registration\n   * @param credentials -> password, email\n   */\n  checkUserAsync: credentials => async dispatch => {\n    dispatch(loginActions.startFetching());\n    const response = await api.users.login(credentials);\n\n    if (response.status === 200) {\n      const results = await response.json();\n      dispatch(loginActions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status\n      };\n      dispatch(loginActions.setFetchingError(error));\n    }\n\n    dispatch(loginActions.stopFetching());\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/login-page/state/loginActions.js"],"names":["actionTypes","api","loginActions","Object","freeze","startFetching","type","LOGIN_START_FETCHING","stopFetching","LOGIN_STOP_FETCHING","setFetchingError","error","LOGIN_SET_FETCHING_ERROR","payload","setUserStatus","status","LOGIN_SET_STATUS","fillUserData","LOGIN_FILL","checkUserAsync","credentials","dispatch","response","users","login","results","json"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,eAA5B,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAO,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc;AACxCC,EAAAA,aAAa,EAAE,MAAM;AACnB,WAAO;AAAEC,MAAAA,IAAI,EAAEN,WAAW,CAACO;AAApB,KAAP;AACD,GAHuC;AAIxCC,EAAAA,YAAY,EAAE,MAAM;AAClB,WAAO;AACLF,MAAAA,IAAI,EAAEN,WAAW,CAACS;AADb,KAAP;AAGD,GARuC;AASxCC,EAAAA,gBAAgB,EAAGC,KAAD,IAAW;AAC3B,WAAO;AACLL,MAAAA,IAAI,EAAEN,WAAW,CAACY,wBADb;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GAduC;AAgBxCG,EAAAA,aAAa,EAAGC,MAAD,IAAY;AACzB,WAAO;AACLT,MAAAA,IAAI,EAAEN,WAAW,CAACgB,gBADb;AAELH,MAAAA,OAAO,EAAEE;AAFJ,KAAP;AAID,GArBuC;AAuBxCE,EAAAA,YAAY,EAAGJ,OAAD,IAAa;AACzB,WAAO;AACLP,MAAAA,IAAI,EAAEN,WAAW,CAACkB,UADb;AAELL,MAAAA;AAFK,KAAP;AAID,GA5BuC;;AA+BxC;AACF;AACA;AACA;AACEM,EAAAA,cAAc,EAAGC,WAAD,IAAiB,MAAOC,QAAP,IAAoB;AACnDA,IAAAA,QAAQ,CAACnB,YAAY,CAACG,aAAb,EAAD,CAAR;AAEA,UAAMiB,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,KAAJ,CAAUC,KAAV,CAAgBJ,WAAhB,CAAvB;;AACA,QAAIE,QAAQ,CAACP,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMU,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AAEAL,MAAAA,QAAQ,CAACnB,YAAY,CAACY,aAAb,CAA2BW,OAA3B,CAAD,CAAR;AACD,KAJD,MAIO;AACL,YAAMd,KAAK,GAAG;AACZI,QAAAA,MAAM,EAAEO,QAAQ,CAACP;AADL,OAAd;AAGAM,MAAAA,QAAQ,CAACnB,YAAY,CAACQ,gBAAb,CAA8BC,KAA9B,CAAD,CAAR;AACD;;AACDU,IAAAA,QAAQ,CAACnB,YAAY,CAACM,YAAb,EAAD,CAAR;AACD;AAlDuC,CAAd,CAArB","sourcesContent":["// ActionTypes\nimport { actionTypes } from './actionTypes';\n// Api\nimport { api } from '../../../api';\n\nexport const loginActions = Object.freeze({\n  startFetching: () => {\n    return { type: actionTypes.LOGIN_START_FETCHING };\n  },\n  stopFetching: () => {\n    return {\n      type: actionTypes.LOGIN_STOP_FETCHING,\n    };\n  },\n  setFetchingError: (error) => {\n    return {\n      type: actionTypes.LOGIN_SET_FETCHING_ERROR,\n      payload: error,\n    };\n  },\n\n  setUserStatus: (status) => {\n    return {\n      type: actionTypes.LOGIN_SET_STATUS,\n      payload: status,\n    };\n  },\n\n  fillUserData: (payload) => {\n    return {\n      type: actionTypes.LOGIN_FILL,\n      payload,\n    };\n  },\n\n\n  /**\n   * Checking user registration\n   * @param credentials -> password, email\n   */\n  checkUserAsync: (credentials) => async (dispatch) => {\n    dispatch(loginActions.startFetching());\n\n    const response = await api.users.login(credentials);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      dispatch(loginActions.setUserStatus(results));\n    } else {\n      const error = {\n        status: response.status,\n      };\n      dispatch(loginActions.setFetchingError(error));\n    }\n    dispatch(loginActions.stopFetching());\n  },\n});\n"]},"metadata":{},"sourceType":"module"}