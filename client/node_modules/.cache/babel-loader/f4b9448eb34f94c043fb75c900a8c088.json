{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null\n};\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});\nexport const fetchOrdersListAsync = createAsyncThunk('orders/fetchOrdersListAsync', async (_, thunkAPI) => {\n  const response = await api.orders.getAllOrders();\n\n  if (response.status === 200) {\n    const orders = await response.json();\n    thunkAPI.dispatch(ordersListReducer.actions.fillOrders(orders));\n    return orders;\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(ordersListReducer.actions.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(ordersListReducer.actions.stopFetching());\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/orders-list-page/state/ordersListReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","orders","isLoading","error","ordersListReducer","name","reducers","stopFetching","state","setFetchingError","action","payload","ordersFill","extraReducers","fetchOrdersListAsync","fulfilled","order","rejected","status","pending","_","thunkAPI","response","getAllOrders","json","dispatch","actions","fillOrders"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAOA,OAAO,MAAMC,iBAAiB,GAAGN,WAAW,CAAC;AAC3CO,EAAAA,IAAI,EAAE,YADqC;AAE3CL,EAAAA,YAF2C;AAG3CM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAEC,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACD,KAHO;AAIRO,IAAAA,gBAAgB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACnCF,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAArB;AACD,KAPO;AAQRC,IAAAA,UAAU,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AAC7BF,MAAAA,KAAK,CAACP,MAAN,GAAeS,MAAM,CAACC,OAAtB;AACAH,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD;AAZO,GAHiC;AAiB3CU,EAAAA,aAAa,EAAE;AACb,KAACC,oBAAoB,CAACC,SAAtB,GAAkC,CAACP,KAAD,EAAQE,MAAR,KAAmB;AACnDF,MAAAA,KAAK,CAACQ,KAAN,GAAcN,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KALY;AAMb,KAACW,oBAAoB,CAACG,QAAtB,GAAiC,CAACT,KAAD,EAAQE,MAAR,KAAmB;AAClDF,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc;AACZe,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAXY;AAYb,KAACJ,oBAAoB,CAACK,OAAtB,GAAgCX,KAAK,IAAI;AACvCA,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD;AAdY;AAjB4B,CAAD,CAArC;AAoCP,OAAO,MAAMY,oBAAoB,GAAGjB,gBAAgB,CAClD,6BADkD,EAElD,OAAOuB,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMvB,GAAG,CAACE,MAAJ,CAAWsB,YAAX,EAAvB;;AACA,MAAID,QAAQ,CAACJ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMjB,MAAM,GAAG,MAAMqB,QAAQ,CAACE,IAAT,EAArB;AAEAH,IAAAA,QAAQ,CAACI,QAAT,CAAkBrB,iBAAiB,CAACsB,OAAlB,CAA0BC,UAA1B,CAAqC1B,MAArC,CAAlB;AAEA,WAAOA,MAAP;AACD,GAND,MAMO;AACL,UAAME,KAAK,GAAG;AACZe,MAAAA,MAAM,EAAEI,QAAQ,CAACJ;AADL,KAAd;AAIAG,IAAAA,QAAQ,CAACI,QAAT,CAAkBrB,iBAAiB,CAACsB,OAAlB,CAA0BjB,gBAA1B,CAA2CN,KAA3C,CAAlB;AACD;;AAEDkB,EAAAA,QAAQ,CAACI,QAAT,CAAkBrB,iBAAiB,CAACsB,OAAlB,CAA0BnB,YAA1B,EAAlB;AACD,CAnBiD,CAA7C","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n};\n\n\nexport const ordersListReducer = createSlice({\n  name: 'ordersList',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = false;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    ordersFill: (state, action) => {\n      state.orders = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: {\n    [fetchOrdersListAsync.fulfilled]: (state, action) => {\n      state.order = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [fetchOrdersListAsync.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [fetchOrdersListAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n\n\nexport const fetchOrdersListAsync = createAsyncThunk(\n  'orders/fetchOrdersListAsync',\n  async (_, thunkAPI) => {\n    const response = await api.orders.getAllOrders();\n    if (response.status === 200) {\n      const orders = await response.json();\n\n      thunkAPI.dispatch(ordersListReducer.actions.fillOrders(orders));\n\n      return orders;\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      thunkAPI.dispatch(ordersListReducer.actions.setFetchingError(error));\n    }\n\n    thunkAPI.dispatch(ordersListReducer.actions.stopFetching());\n  }\n);\n"]},"metadata":{},"sourceType":"module"}