{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Api\n\nimport { api } from '../../../api';\nconst initialState = {\n  login: {\n    password: '',\n    email: ''\n  },\n  isUserRegistered: null,\n  isLoading: false,\n  error: null\n};\nexport const checkUserAsync = createAsyncThunk('login/loginFetchAsync', async (credentials, thunkAPI) => {\n  const response = await api.users.login(credentials);\n\n  if (response.status === 200) {\n    const results = await response.json();\n    thunkAPI.dispatch(loginReducer.setUserStatus(results));\n    return results;\n  } else {\n    const error = {\n      status: response.status\n    };\n    thunkAPI.dispatch(loginReducer.setFetchingError(error));\n  }\n\n  thunkAPI.dispatch(loginReducer.stopFetching());\n});\nexport const loginReducer = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isUserRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    userLogout: state => {\n      state.state.isUserRegistered = null;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [checkUserAsync.fulfilled]: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [checkUserAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error'\n      };\n    },\n    [checkUserAsync.pending]: state => {\n      state.isLoading = true;\n    }\n  }\n});","map":{"version":3,"sources":["F:/artem-pizza/client/src/pages/login-page/state/loginReducer.js"],"names":["createAsyncThunk","createSlice","api","initialState","login","password","email","isUserRegistered","isLoading","error","checkUserAsync","credentials","thunkAPI","response","users","status","results","json","dispatch","loginReducer","setUserStatus","setFetchingError","stopFetching","name","reducers","state","action","payload","fillUserData","userLogout","extraReducers","fulfilled","rejected","pending"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// Api\nimport { api } from '../../../api';\n\nconst initialState = {\n  login: { password: '', email: '' },\n  isUserRegistered: null,\n  isLoading: false,\n  error: null,\n};\n\nexport const checkUserAsync = createAsyncThunk(\n  'login/loginFetchAsync',\n  async (credentials, thunkAPI) => {\n    const response = await api.users.login(credentials);\n    if (response.status === 200) {\n      const results = await response.json();\n\n      thunkAPI.dispatch(loginReducer.setUserStatus(results));\n      return results;\n    } else {\n      const error = {\n        status: response.status,\n      };\n      thunkAPI.dispatch(loginReducer.setFetchingError(error));\n    }\n    thunkAPI.dispatch(loginReducer.stopFetching());\n  }\n);\n\nexport const loginReducer = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n\n    stopFetching: state => {\n      state.isLoading = true;\n    },\n    setFetchingError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    fillUserData: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    setUserStatus: (state, action) => {\n      state.isUserRegistered = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    userLogout: (state) => {\n      state.\n      state.isUserRegistered = null;\n      state.isLoading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: {\n    [checkUserAsync.fulfilled]: (state, action) => {\n      state.login = action.payload;\n      state.isLoading = false;\n      state.error = null;\n    },\n    [checkUserAsync.rejected]: state => {\n      state.isLoading = false;\n      state.error = {\n        status: 'fetching error',\n      };\n    },\n    [checkUserAsync.pending]: state => {\n      state.isLoading = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}